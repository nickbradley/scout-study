[["52929821",{"id":"52929821","questionId":3978492,"isAccepted":false,"score":42,"created":1540212654,"edited":1668558725,"body":"<h1>üèÅ Fastest Way to Clone an Array</h1>\n<p>I made this very plain utility function to test the time that it takes to clone an array. It is not 100% reliable however it can give you a bulk idea as for how long it takes to clone an existing array:</p>\n<pre><code>function clone(fn) {\n  const arr = [...Array(1000000)];\n  console.time('timer');\n  fn(arr);\n  console.timeEnd('timer');\n}\n</code></pre>\n<p>And tested different approach:</p>\n<pre><code>1)   5.79ms -&gt; clone(arr =&gt; Object.values(arr));\n2)   7.23ms -&gt; clone(arr =&gt; [].concat(arr));\n3)   9.13ms -&gt; clone(arr =&gt; arr.slice());\n4)  24.04ms -&gt; clone(arr =&gt; { const a = []; for (let val of arr) { a.push(val); } return a; });\n5)  30.02ms -&gt; clone(arr =&gt; [...arr]);\n6)  39.72ms -&gt; clone(arr =&gt; JSON.parse(JSON.stringify(arr)));\n7)  99.80ms -&gt; clone(arr =&gt; arr.map(i =&gt; i));\n8) 259.29ms -&gt; clone(arr =&gt; Object.assign([], arr));\n9) Maximum call stack size exceeded -&gt; clone(arr =&gt; Array.of(...arr));\n</code></pre>\n<hr />\n<p><strong>UPDATE</strong>:<br /></p>\n<ol>\n<li>Tests were made back in 2018, so today most likely you'll get different result with current browsers.</li>\n<li>Out of all of those, the only way to deep clone an array is by using <code>JSON.parse(JSON.stringify(arr))</code>.<br /><br />\nThat said, do not use the above if your array might include functions as it will return <code>null</code>.<br /><em>Thank you @GilEpshtain for this update</em>.</li>\n</ol>\n"}],["73236201",{"id":"73236201","questionId":68549027,"isAccepted":false,"score":0,"created":1659617122,"body":"<p><strong>If you only want the separators in between individual digits</strong>, just format as a number instead of using <code>currency</code>:</p>\n<pre><code>const numberFormatter = new Intl.NumberFormat(&quot;en-US&quot;, {\n  // Do not show fractions - front end should only handle whole numbers\n  maximumFractionDigits: 0,\n});\n</code></pre>\n<p>And then <code>numberFormatter.format(asNumber);</code> with whatever <code>number</code> you like.</p>\n<p>For your example of <code>123456</code>, <code>&quot;de-DE&quot;</code> is <code>123.456</code>, <code>&quot;ja-JP&quot;</code> is <code>123,456</code></p>\n"}],["72409602",{"id":"72409602","questionId":72409416,"isAccepted":false,"score":-3,"created":1653675626,"body":"<p>Being completely honest, JS is not a good programming language for game development, and if you have an array that contains that many elements that you need to manipulate in less than 300ish ms then you're probably doing something wrong. However,</p>\n<p>You could make it yourself, make a loop that goes through each element and pushes it to a different array. Quick example:</p>\n<pre><code>let arr = new Array(99999999); \nlet newArr = []; \nfor(let i = 0; i &lt; arr.length; i++) {\n    newArr.push(arr[i]); \n}\n</code></pre>\n<p>all that does is simply loop through each element, push it to the new array until done</p>\n<p>or you could just do:</p>\n<pre><code>let arr = new Array(99999999); \nlet newArr = arr; \n</code></pre>\n<p>both of those would work, I'm unsure how fast they would be however, But it's the fastest method I could think of. Hopefully this helps :)</p>\n"}],["72084975",{"id":"72084975","questionId":72084911,"isAccepted":false,"score":0,"created":1651484858,"edited":1651646375,"body":"<p>You need a custom comparer function that will use the value property of your objects to make a descending alphabetic sort on your ArrOfObj.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort</a></p>\n<p>The comparer, in this demo I shared here, extracts the numeric part from string values and compares them based on how those 2 numbers are relative to each other so that the array will be sorted by value property in a descending manner.</p>\n<ul>\n<li><code>BNG2000 </code>  (as string) -&gt; <code>2000</code> (as number)</li>\n<li><code>BNG2001 </code>  (as string) -&gt; <code>2001</code> (as number)</li>\n<li><code>CHN-4000</code> (as string) -&gt; <code>4000</code> (as number)</li>\n<li><code>CHN-4004</code> (as string) -&gt; <code>4004</code> (as number)</li>\n</ul>\n<p>Sort order: <code>1: 4004, 2: 4000, 3: 2001, 4: 2000</code></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var ArrOfObj=[\n  {name: \"a\", value:\"BNG2000\"},\n  {name: \"b\", value:\"BNG2001\"},\n  {name: \"c\", value:\"CHN-4000\"},\n  {name: \"d\", value:\"CHN-4004\"}\n]\n\nfunction customComparer(a, b){\n    const value_a = parseInt( getNumberPart(a.value) );\n    const value_b = parseInt( getNumberPart(b.value) );    \n    if(value_a &lt; value_b) return 1;\n    if(value_a &gt; value_b) return -1;\n    return 0;\n}\n\n//returns the numeric part contained in subject string\nfunction getNumberPart(subject){    \n    let value = '';\n    const match = subject.match(/(\\d+)/m);\n    if (match != null)  \n      value = match[1];\n      \n    return value;\n}\n\nArrOfObj.sort( customComparer );\nconsole.log(ArrOfObj);\n/*\n[\n  {\n    \"name\": \"d\",\n    \"value\": \"CHN-4004\"\n  },\n  {\n    \"name\": \"c\",\n    \"value\": \"CHN-4000\"\n  },\n  {\n    \"name\": \"b\",\n    \"value\": \"BNG2001\"\n  },\n  {\n    \"name\": \"a\",\n    \"value\": \"BNG2000\"\n  }\n]\n*/</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["1129270",{"id":"1129270","questionId":1129216,"isAccepted":true,"score":5334,"created":1247628951,"edited":1649326652,"body":"<p>It's easy enough to write your own comparison function:</p>\n<pre><code>function compare( a, b ) {\n  if ( a.last_nom &lt; b.last_nom ){\n    return -1;\n  }\n  if ( a.last_nom &gt; b.last_nom ){\n    return 1;\n  }\n  return 0;\n}\n\nobjs.sort( compare );\n</code></pre>\n<p>Or inline (c/o Marco Demaio):</p>\n<pre class=\"lang-js prettyprint-override\"><code>objs.sort((a,b) =&gt; (a.last_nom &gt; b.last_nom) ? 1 : ((b.last_nom &gt; a.last_nom) ? -1 : 0))\n</code></pre>\n<p>Or simplified for numeric (c/o Andre Figueiredo):</p>\n<pre class=\"lang-js prettyprint-override\"><code>objs.sort((a,b) =&gt; a.last_nom - b.last_nom); // b - a for reverse sort\n</code></pre>\n"}],["71668774",{"id":"71668774","questionId":71668735,"isAccepted":false,"score":0,"created":1648587934,"edited":1648644237,"body":"<p>You need to use express static middleware.</p>\n<pre><code>app.use(express.static('public'));  \n</code></pre>\n<p>Public in this case is the folder where your files are located.</p>\n"}],["71670938",{"id":"71670938","questionId":71668735,"isAccepted":true,"score":0,"created":1648608516,"body":"<p>First off, you need to make sure you realize that with a nodejs web server, no files from the server file system are served by default.  None.  This is unlike some other web servers in other environments.</p>\n<p>So, if you want to serve any files, then you must have routes or middleware in your Express server that serves those.  In the Express framework, <code>express.static()</code> is often used for serving a group of static files (all in one directory or in one directory hierarchy) with one line of code.</p>\n<p>Second off, web servers themselves don't have relative paths.  Because an http request stands on its own, there is nothing for it to be relative to.  So, they only work in absolute paths that have a domain or IP address and a path that starts with <code>/</code>.  So, make sure you realize that all http requests on your server will have a path that starts with <code>/</code>.</p>\n<p>Third, if you attempt to use a relative path in a browser, in an HTML tag or in a call to <code>fetch()</code> or any other API that takes a URL, the browser will see that the URL is a relative URL and it will go grab the path from the current web page and it will insert that path onto the front of your URL and turn it into an absolute path (one that always starts with <code>/</code>).</p>\n<p>So, using a relative path in your HTML or client-side Javascript will always be turned into an absolute path by the browser before the http request is made to your server.</p>\n<blockquote>\n<p>can we access them using relative path, if not. Why?</p>\n</blockquote>\n<p>So ... you nearly always want to use absolute paths on the client.  If you don't use an absolute path, the browser will use its logic to turn it into an absolute path and that may or may not be the path you want.  Better to just specify the actual absolute path you want in your code or HTML.</p>\n<p>So, if you have a directory hierarchy on your server that looks like this:</p>\n<pre><code>/my-project\n    server\n    public\n        images\n            kitten.jpg\n</code></pre>\n<p>You can then use this on the server:</p>\n<pre><code>app.use(express.static(&quot;/my-project/public&quot;));\n</code></pre>\n<p>And, this in your HTML:</p>\n<pre><code>&lt;img src=&quot;/images/kitten.jpg&quot;&gt;\n</code></pre>\n<p>In this case, the express.static middleware will take the <code>/images/kitten.jpg</code> URL path and see if it can find the corresponding file in <code>/my-project/public</code> which means it will be looking for <code>/my-project/public/images/kitten.jpg</code>.  If it finds that matching file, it will automatically serve it.</p>\n<hr />\n<p>Or, to only allow access to the <code>images</code> folder, you could do this:</p>\n<p>You can then use this on the server:</p>\n<pre><code>app.use(express.static(&quot;/my-project/public/images&quot;));\n</code></pre>\n<p>And, this in your HTML:</p>\n<pre><code>&lt;img src=&quot;/kitten.jpg&quot;&gt;\n</code></pre>\n<p>In this case, the express.static middleware will take the <code>/kitten.jpg</code> URL path and see if it can find the corresponding file in <code>/my-project/public/images</code> which means it will be looking for <code>/my-project/public/images/kitten.jpg</code>.  If it finds that matching file, it will automatically serve it.</p>\n"}],["48718969",{"id":"48718969","questionId":12462318,"isAccepted":false,"score":74,"created":1518252768,"edited":1648209465,"body":"<p>Considering you have following snippet:</p>\n<pre><code>var array = [\n    { name:&quot;string 1&quot;, value:&quot;this&quot;, other: &quot;that&quot; },\n    { name:&quot;string 2&quot;, value:&quot;this&quot;, other: &quot;that&quot; }\n];\n</code></pre>\n<p>You can use the following function to search for items</p>\n<pre><code>const search = what =&gt; array.find(element =&gt; element.name === what);\n</code></pre>\n<p>And you can check whether the item was found or not.</p>\n<pre><code>const found = search(&quot;string1&quot;);\nif (found) {\n    console.log(found.value, found.other);\n} else {\n    console.log('No result found');\n}\n</code></pre>\n"}],["43778799",{"id":"43778799","questionId":12462318,"isAccepted":false,"score":26,"created":1493889580,"edited":1645575226,"body":"<p>With a foreach:</p>\n<pre><code>let itemYouWant = null;\narray.forEach((item) =&gt; {\n    if (item.name === 'string 1') {\n        itemYouWant = item;\n    }\n});\nconsole.log(itemYouWant);\n</code></pre>\n<p>Or even better with a map:</p>\n<pre><code>const itemYouWant = array.map((item) =&gt; {\n    if (item.name === 'string 1') {\n        return item;\n    }\n    return null;\n});\nconsole.log(itemYouWant);\n</code></pre>\n"}],["71015495",{"id":"71015495","questionId":71015238,"isAccepted":false,"score":2,"created":1644222573,"edited":1644224199,"body":"<p>if the folder public in the same root with your node app use:</p>\n<pre><code>app.use(express.static('public'))\n</code></pre>\n<p>To create a virtual path prefix (where the path does not actually exist in the file system) for files that are served by the express.static function, specify a mount path for the static directory, as shown below:</p>\n<p><code>app.use('/static', express.static('public'))</code></p>\n<p>Now, you can load the files that are in the public directory from the /static path prefix.</p>\n<p>http://localhost:3000/static/images/kitten.jpg\nhttp://localhost:3000/static/css/style.css</p>\n<p>However, the path that you provide to the express.static function is relative to the directory from where you launch your node process. If you run the express app from another directory, it‚Äôs safer to use the absolute path of the directory that you want to serve:</p>\n<p>const path = require('path')\napp.use('/static', express.static(path.join(__dirname, 'public')))</p>\n"}],["68758156",{"id":"68758156","questionId":68756983,"isAccepted":false,"score":0,"created":1628773861,"body":"<p>You could get the date from millisecs and store it into <code>selectedDate</code>; then <code>add</code> and <code>subtract</code> starting from this Date:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var selectedDate = new Date(moment(1628312400000));\nconsole.log(moment(selectedDate).add(2, 'days').format('DD-MM-YYYY hh:mm:ss'));\nconsole.log(moment(selectedDate).subtract(1, 'days').format('DD-MM-YYYY hh:mm:ss'));</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["68757386",{"id":"68757386","questionId":68756983,"isAccepted":false,"score":0,"created":1628770744,"edited":1628773151,"body":"<p>Here's how, just add and subtract directly using your <code>selectedDate</code></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var selectedDate = moment(1628312400000);\n\nlet next = \"Next Day :: \" + moment(selectedDate, \"America/Chicago\").add(2, 'days').format('DD-MM-YYYY') + \" \" + \"23:00:00\"; // getting invalid date\nlet yest = \"Yesterday :: \" + moment(selectedDate, \"America/Chicago\").subtract(1, 'days').format('DD-MM-YYYY') + \" \" + \"00:00:00\"; // getting invalid date\n\nconsole.log(yest)\nconsole.log(next)</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.11.2/moment.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["68550501",{"id":"68550501","questionId":68549027,"isAccepted":true,"score":12,"created":1627412774,"edited":1627460695,"body":"<p>One simple way to do achieve what you want is to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\" rel=\"noreferrer\"><code>String#replace()</code></a> to remove the currency from the string. To make this easier, you can set <code>currencyDisplay</code> to <code>&quot;code&quot;</code> which will use the ISO currency code - the same one passed in to <code>currency</code>:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const number = 123456.789;\n\nconsole.log(new Intl.NumberFormat('de-DE', { \n    style: 'currency',\n    currency: 'EUR', \n    currencyDisplay: \"code\" \n  })\n  .format(number)\n  .replace(\"EUR\", \"\")\n  .trim()\n); // 123.456,79\n \n// the Japanese yen doesn't use a minor unit \nconsole.log(new Intl.NumberFormat('ja-JP', { \n    style: 'currency', \n   currency: 'JPY', \n    currencyDisplay: \"code\" \n  })\n  .format(number)\n  .replace(\"JPY\", \"\")\n  .trim()\n); // 123,457</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>This can be extracted into a function:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const number = 123456.789;\n\nconsole.log(format('de-DE', 'EUR', number)); // 123.456,79\nconsole.log(format('ja-JP', 'JPY', number)); // 123,457\n\nfunction format (locale, currency, number) {\n  return new Intl.NumberFormat(locale, { \n    style: 'currency', \n    currency, \n    currencyDisplay: \"code\" \n  })\n  .format(number)\n  .replace(currency, \"\")\n  .trim();\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<hr />\n<p>An alternative that allows you more control is to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatToParts\" rel=\"noreferrer\"><code>Intl.NumberFormat#formatToParts()</code></a> which formats the number but gives you tokens that you can programmatically consume and manipulate. For example, using the method with <code>locale = &quot;de-DE&quot;</code> and <code>currency = &quot;EUR&quot;</code> you get the following output:</p>\n<pre><code>[\n  {\n    &quot;type&quot;: &quot;integer&quot;,\n    &quot;value&quot;: &quot;123&quot;\n  },\n  {\n    &quot;type&quot;: &quot;group&quot;,\n    &quot;value&quot;: &quot;.&quot;\n  },\n  {\n    &quot;type&quot;: &quot;integer&quot;,\n    &quot;value&quot;: &quot;456&quot;\n  },\n  {\n    &quot;type&quot;: &quot;decimal&quot;,\n    &quot;value&quot;: &quot;,&quot;\n  },\n  {\n    &quot;type&quot;: &quot;fraction&quot;,\n    &quot;value&quot;: &quot;79&quot;\n  },\n  {\n    &quot;type&quot;: &quot;literal&quot;,\n    &quot;value&quot;: &quot; &quot;\n  },\n  {\n    &quot;type&quot;: &quot;currency&quot;,\n    &quot;value&quot;: &quot;EUR&quot;\n  }\n]\n</code></pre>\n<p>Which means that you can easily filter out <code>&quot;type&quot;: &quot;currency&quot;</code> and then combine the rest into a string. For example:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const number = 123456.789;\n\nconsole.log(format('de-DE', 'EUR', number)); // 123.456,79\nconsole.log(format('ja-JP', 'JPY', number)); // 123,457\n\nfunction format (locale, currency, number) {\n  return new Intl.NumberFormat(locale, { \n    style: 'currency',\n    currency, \n    currencyDisplay: \"code\" \n  })\n  .formatToParts(number)\n  .filter(x =&gt; x.type !== \"currency\")\n  .map(x =&gt; x.value)\n  .join(\"\")\n  .trim()\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["49169697",{"id":"49169697","questionId":49169562,"isAccepted":true,"score":1,"created":1520501567,"edited":1626093715,"body":"<pre><code>endTime.subtract(duration);\n</code></pre>\n<p>Should do the trick ,here is the docs if you want to dig deeper <a href=\"https://momentjs.com/docs/#/manipulating/subtract/\" rel=\"nofollow noreferrer\">docs</a></p>\n<p>Edit:</p>\n<pre><code>const endTime = moment(); //now time\nconst duration = request.input('duration') //duration in miliseconds\nlet startTime = endTime.subtract(duration,'ms')\n</code></pre>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const endTime = moment(); //now time\nconst duration = 600000; //hardcoded 10 mins //duration in miliseconds\nconsole.log(endTime)\nlet startTime = endTime.subtract(duration, 'ms')\nconsole.log(startTime)</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.2.1/moment.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["35398031",{"id":"35398031","questionId":7364150,"isAccepted":true,"score":2019,"created":1455484270,"edited":1622262603,"body":"<p>Use the <code>find()</code> method:</p>\n<pre><code>myArray.find(x =&gt; x.id === '45').foo;\n</code></pre>\n<p>From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\" rel=\"noreferrer\">MDN</a>:</p>\n<blockquote>\n<p>The <code>find()</code> method returns the first value in the array, if an element in the array satisfies the provided testing function. Otherwise <code>undefined</code> is returned.</p>\n</blockquote>\n<hr />\n<p>If you want to find its <em>index</em> instead, use <code>findIndex()</code>:</p>\n<pre><code>myArray.findIndex(x =&gt; x.id === '45');\n</code></pre>\n<p>From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\" rel=\"noreferrer\">MDN</a>:</p>\n<blockquote>\n<p>The <code>findIndex()</code> method returns the index of the first element in the array that satisfies the provided testing function. Otherwise -1 is returned.</p>\n</blockquote>\n<hr />\n<p>If you want to get an array of matching elements, use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" rel=\"noreferrer\"><code>filter()</code></a> method instead:</p>\n<pre><code>myArray.filter(x =&gt; x.id === '45');\n</code></pre>\n<p>This will return an array of objects. If you want to get an array of <code>foo</code> properties, you can do this with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" rel=\"noreferrer\"><code>map()</code></a> method:</p>\n<pre><code>myArray.filter(x =&gt; x.id === '45').map(x =&gt; x.foo);\n</code></pre>\n<hr />\n<p>Side note: methods like <code>find()</code> or <code>filter()</code>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" rel=\"noreferrer\">arrow functions</a> are not supported by older browsers (like IE), so if you want to support these browsers, you should transpile your code using <a href=\"https://babeljs.io/\" rel=\"noreferrer\">Babel</a> (with the <a href=\"https://babeljs.io/docs/usage/polyfill/\" rel=\"noreferrer\">polyfill</a>).</p>\n"}],["5681208",{"id":"5681208","questionId":149055,"isAccepted":false,"score":9,"created":1302894237,"edited":1619907786,"body":"<p>Patrick Desjardins (ex Daok)'s example worked well for me. I ported it over to CoffeeScript if anyone is interested.</p>\n<pre><code>Number.prototype.toMoney = (decimals = 2, decimal_separator = &quot;.&quot;, thousands_separator = &quot;,&quot;) -&gt;\n    n = this\n    c = if isNaN(decimals) then 2 else Math.abs decimals\n    sign = if n &lt; 0 then &quot;-&quot; else &quot;&quot;\n    i = parseInt(n = Math.abs(n).toFixed(c)) + ''\n    j = if (j = i.length) &gt; 3 then j % 3 else 0\n    x = if j then i.substr(0, j) + thousands_separator else ''\n    y = i.substr(j).replace(/(\\d{3})(?=\\d)/g, &quot;$1&quot; + thousands_separator)\n    z = if c then decimal_separator + Math.abs(n - i).toFixed(c).slice(2) else ''\n    sign + x + y + z\n</code></pre>\n"}],["66739886",{"id":"66739886","questionId":66739872,"isAccepted":false,"score":2,"created":1616383025,"body":"<p>It's just as you're saying here:</p>\n<pre><code>const arrCopy = arr.slice(); // Creating shallow copy\n</code></pre>\n<p>The new array is separate from the old array. Changing the new array structure <em>without changing any of its containing objects</em> will result in only the new array changing, not the old array changing.</p>\n<blockquote>\n<p>I thought the arr and arrCopy were pointing to the same object. (an array with objects)</p>\n</blockquote>\n<p>No. Both <code>arr</code> and <code>arrCopy</code> are <em>separate containers</em>. Those containers contain pointers to the same objects, but the <em>containers themselves</em> are different - so, changing one of the containers doesn't change the other container.</p>\n<p><a href=\"https://i.stack.imgur.com/LJ7lw.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/LJ7lw.png\" alt=\"enter image description here\" /></a></p>\n"}],["65391806",{"id":"65391806","questionId":32544846,"isAccepted":false,"score":1,"created":1608549452,"body":"<p>I also had that same problem now i fixed it by making a condition just like the below code</p>\n<pre class=\"lang-js prettyprint-override\"><code>app.use(&quot;/&quot;, (req, res, next) =&gt; {\n  //check a condition if its false then return\n  if(1 !== 1)return\n  //After returned all conditions\n  next()\n}, express.static(&quot;public&quot;))\n</code></pre>\n<p>And this code checks if 1 is not 1 then wont show the files if 1 is 1 then it shows all public files :)</p>\n"}],["46935425",{"id":"46935425","questionId":44808882,"isAccepted":true,"score":227,"created":1508942610,"edited":1602266548,"body":"<p><strong>Clone an object:</strong></p>\n<p><code>const myClonedObject = Object.assign({}, myObject); </code></p>\n<p><strong>Clone an Array:</strong></p>\n<ul>\n<li><em><strong>Option 1</strong></em>  if you have an array of primitive types:</li>\n</ul>\n<p><code>const myClonedArray  = Object.assign([], myArray);</code></p>\n<ul>\n<li><em><strong>Option 2</strong></em> - if you have an array of objects:</li>\n</ul>\n<pre><code>const myArray= [{ a: 'a', b: 'b' }, { a: 'c', b: 'd' }];\nconst myClonedArray = [];\nmyArray.forEach(val =&gt; myClonedArray.push(Object.assign({}, val)));\n</code></pre>\n"}],["63874664",{"id":"63874664","questionId":53679762,"isAccepted":false,"score":3,"created":1600024781,"edited":1600034621,"body":"<p>Much later but may help others. This worked for me as it yields a value prefixed with the 'R' as used in South Africa.</p>\n<pre><code>let displayValue = new Intl.NumberFormat('en-ZA', {\n  style: 'currency',\n  currency: 'ZAR',\n  minimumFractionDigits: 2\n}).format(this.displaySubTotal)\n</code></pre>\n<p>For correct locale - Refer to: <a href=\"https://www.localeplanet.com/icu/en-ZA/index.html\" rel=\"nofollow noreferrer\">https://www.localeplanet.com/icu/en-ZA/index.html</a></p>\n"}],["61833492",{"id":"61833492","questionId":16548586,"isAccepted":false,"score":1,"created":1589615033,"edited":1589735070,"body":"<h1>Follow a simple and consistent folder structure, then use a module to have everything done automatically.</h1>\n\n<blockquote>\n  <p>Then never look back. Spend time saved on the rest of the important stuff.</p>\n</blockquote>\n\n<h2>TL;DR</h2>\n\n<pre><code>$ npm install express-routemagic --save\n</code></pre>\n\n<pre><code>const magic = require('express-routemagic')\nmagic.use(app, __dirname, '[your route directory]')\n</code></pre>\n\n<p>That's it!</p>\n\n<h2>More info:</h2>\n\n<h2>How you would do this? Let's start with file structuring:</h2>\n\n<pre><code>project_folder\n|--- routes\n|     |--- nested-folder\n|     |     |--- index.js\n|     |--- a-file-that-doesnt-share-same-name-with-another-folder.js\n|     |--- index.js\n|--- app.js\n</code></pre>\n\n<h2>In app.js</h2>\n\n<pre><code>const express = require('express')\nconst app = express()\nconst magic = require('express-routemagic')\nmagic.use(app, __dirname, 'routes')\n</code></pre>\n\n<h2>In any of your routing files:</h2>\n\n<h3>For e.g., index.js</h3>\n\n<pre class=\"lang-js prettyprint-override\"><code>const router = require('express').Router()\n\nrouter.get('/', (req, res) =&gt; { ... })\nrouter.get('/something-else', (req, res) =&gt; { ... })\n</code></pre>\n\n<h3>Or a-file-that-doesnt-share-same-name-with-another-folder.js</h3>\n\n<blockquote>\n  <p>Usually you might want to start a folder and use the <code>index.js</code>\n  pattern. But if it's a small file it's okay.</p>\n</blockquote>\n\n<pre class=\"lang-js prettyprint-override\"><code>const router = require('express').Router()\nconst dir = 'a-file-that-do-not-have-another-folder-with-same-name' // you can use this to shorten, but it's optional.\n\nrouter.get(`$(dir)/`, (req, res) =&gt; { ... })\nrouter.get(`$(dir)/nested-route`, (req, res) =&gt; { ... })\n</code></pre>\n\n<p><em>Disclaimer: I wrote the package. But really it's long-overdue, it reached my limit to wait for someone to write it.</em></p>\n"}],["60879319",{"id":"60879319","questionId":60878869,"isAccepted":false,"score":1,"created":1585277433,"body":"<p>You can add a mount path:</p>\n\n<pre><code>app.use('/path1', express.static(__dirname + '/www'));            // Serves files as named in the '/path1' url path\napp.use('/path2', express.static(__dirname + '/otherdirectory')); // Serves files as named in the '/path2' url path\n</code></pre>\n\n<p>For example, if you want to access index.html in the /www directory, you would go to \n(assuming you're hosting your web app on localhost port 80) localhost/path1/index.html.</p>\n"}],["60689982",{"id":"60689982","questionId":60689698,"isAccepted":true,"score":1,"created":1584249964,"body":"<p>For your desire currency number output, you need to use the following methods,</p>\n\n<pre><code>new Intl.NumberFormat('en-IN', {minimumFractionDigits: 2})\n</code></pre>\n\n<p>As well as for your desire time format you need to use <code>moment.js</code> with following way,</p>\n\n<pre><code>moment('010203', 'H:mm:ss').format('HH:mm')\n</code></pre>\n\n<p>To format currency as per your desire output you need to use <code>Intl.NumberFormat</code> function with <code>minimumFractionDigits = 2</code> parameter. </p>\n\n<p>I added a code snipped for that, I formatted with your desire outputs on the following snipped.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var formatter = new Intl.NumberFormat('en-IN', {minimumFractionDigits: 2});\r\n\r\nvar input1 = document.getElementById('input1').innerHTML;\r\nvar input2 = document.getElementById('input2').innerHTML;\r\nvar input3 = document.getElementById('input3').innerHTML;\r\n\r\n\r\ndocument.getElementById('result1').innerHTML = formatter.format(input1);\r\ndocument.getElementById('result2').innerHTML = formatter.format(input2);\r\ndocument.getElementById('result3').innerHTML = formatter.format(input3);\r\n\r\n\r\nfunction formatTime( cTime ){\r\nvar formattedTime;\r\n  if(cTime.length === 1 || cTime.length === 2){\r\n    formattedTime = moment(cTime, 'H').format('HH:mm');\r\n  }else if(cTime.length === 3 || cTime.length === 4){\r\n    formattedTime = moment(cTime, 'H:mm').format('HH:mm');\r\n  }else if(cTime.length &gt; 4){\r\n    formattedTime = moment(cTime, 'H:mm:ss').format('HH:mm');\r\n  }\r\n  return formattedTime;\r\n}\r\n\r\nvar time1 = document.getElementById('time1').innerHTML;\r\nvar time2 = document.getElementById('time2').innerHTML;\r\nvar time3 = document.getElementById('time3').innerHTML;\r\nvar time4 = document.getElementById('time4').innerHTML;\r\nvar time5 = document.getElementById('time5').innerHTML;\r\n\r\ndocument.getElementById('result_time1').innerHTML = formatTime(time1);\r\ndocument.getElementById('result_time2').innerHTML = formatTime(time2);\r\ndocument.getElementById('result_time3').innerHTML = formatTime(time3);\r\ndocument.getElementById('result_time4').innerHTML = formatTime(time4);\r\ndocument.getElementById('result_time5').innerHTML = formatTime(time5);</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>p{\r\n  margin-top: 20px;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js\"&gt;&lt;/script&gt;\r\n&lt;p&gt;\r\n&lt;span id=\"input1\"&gt;1&lt;/span&gt;  &lt;br&gt;&lt;span id=\"result1\"&gt;&lt;/span&gt;\r\n&lt;/p&gt;\r\n\r\n&lt;p&gt;\r\n  &lt;span id=\"input2\"&gt;1.1&lt;/span&gt;  &lt;br&gt;&lt;span id=\"result2\"&gt;&lt;/span&gt;\r\n&lt;/p&gt;\r\n\r\n&lt;p&gt;\r\n&lt;span id=\"input3\"&gt;9999&lt;/span&gt;  &lt;br&gt;&lt;span id=\"result3\"&gt;&lt;/span&gt;\r\n&lt;/p&gt;\r\n\r\n\r\n\r\n&lt;p&gt;\r\n  &lt;span id=\"time1\"&gt;1&lt;/span&gt; &lt;br&gt; &lt;span id=\"result_time1\"&gt;&lt;/span&gt;\r\n&lt;/p&gt;\r\n\r\n&lt;p&gt;\r\n  &lt;span id=\"time2\"&gt;01&lt;/span&gt; &lt;br&gt; &lt;span id=\"result_time2\"&gt;&lt;/span&gt;\r\n&lt;/p&gt;\r\n\r\n&lt;p&gt;\r\n  &lt;span id=\"time3\"&gt;01:0&lt;/span&gt; &lt;br&gt; &lt;span id=\"result_time3\"&gt;&lt;/span&gt;\r\n&lt;/p&gt;\r\n\r\n&lt;p&gt;\r\n  &lt;span id=\"time4\"&gt;0101&lt;/span&gt; &lt;br&gt;&lt;span id=\"result_time4\"&gt;&lt;/span&gt;\r\n&lt;/p&gt;\r\n\r\n&lt;p&gt;\r\n  &lt;span id=\"time5\"&gt;010203&lt;/span&gt; &lt;br&gt; &lt;span id=\"result_time5\"&gt;&lt;/span&gt;\r\n&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["59907089",{"id":"59907089","questionId":27182023,"isAccepted":false,"score":21,"created":1579935771,"body":"<h1>Swift 5.1 ‚Ä¢ iOS 13</h1>\n\n<p>You can use <a href=\"https://developer.apple.com/documentation/foundation/relativedatetimeformatter\" rel=\"noreferrer\">RelativeDateFormatter</a> that has been introduced by Apple in iOS 13.</p>\n\n<pre><code>let exampleDate = Date().addingTimeInterval(-15000)\n\nlet formatter = RelativeDateTimeFormatter()\nformatter.unitsStyle = .full\nlet relativeDate = formatter.localizedString(for: exampleDate, relativeTo: Date())\n\nprint(relativeDate) // 4 hours ago\n</code></pre>\n\n<p>See <a href=\"https://www.hackingwithswift.com/example-code/system/how-to-show-a-relative-date-and-time-using-relativedatetimeformatter\" rel=\"noreferrer\">How to show a relative date and time using RelativeDateTimeFormatter</a>.</p>\n"}],["58573187",{"id":"58573187","questionId":58573128,"isAccepted":false,"score":2,"created":1572111497,"edited":1572112938,"body":"<p>If you use <code>node</code> and <code>pg</code>, then you could do:</p>\n\n<pre><code>const pg = require(\"pg\");\n\n\nconst PG_TIMESTAMP_OID = 1114;\nconst PG_TIMESTAMPTZ_OID = 1184;\nconst PG_DATESTAMP = 1082;\n\nconst parseDate = (date) =&gt; (date === null ? null : moment(date).format());\n\npg.types.setTypeParser(PG_TIMESTAMP_OID, parseDate);\npg.types.setTypeParser(PG_TIMESTAMPTZ_OID, parseDate);\npg.types.setTypeParser(PG_DATESTAMP, parseDate);\n</code></pre>\n\n<p>This way you'd always get the moment format when querying postgres.</p>\n\n<p>If you do not use it, or don't want to, then you could just map your array:</p>\n\n<pre><code>const newArray = myArray.map(item =&gt; ({\n  ...item,\n  date: moment(item.date).format(\"L\")\n}));\n</code></pre>\n"}],["58476031",{"id":"58476031","questionId":27734164,"isAccepted":false,"score":1,"created":1571596120,"body":"<ul>\n<li>Use global wilcard route[ app.use('/') ] for static content and</li>\n<li>Use specific routes [ app.get(/myroute), app.post('/anotherroute')] for dynamic processing using custom logic</li>\n</ul>\n\n<pre><code>//Serves resources from public folder \napp.use('/',express.static(__dirname + '/public')); \n\n//Verify the complete directory path - especially slashes \nconsole.log('Static directory '+__dirname + '/public');\n\napp.get('/list', function (req, res) {\n    res.send('&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;'); });\n</code></pre>\n"}],["57900666",{"id":"57900666","questionId":32544846,"isAccepted":false,"score":2,"created":1568268631,"edited":1568325768,"body":"<p>Old question...but this is a quick solution...</p>\n\n<p>If you want to keep all the functionality that comes with <a href=\"https://expressjs.com/en/4x/api.html#express.static\" rel=\"nofollow noreferrer\">express.static</a>, then you can just monkey-patch <code>req.url</code> (since it's just middleware):</p>\n\n<pre><code>const path = require('path');\nconst express = require('express');\nconst app = express();\n\n// Dynamic path, but only match asset at specific segment.\napp.use('/website/:foo/:bar/:asset', (req, res, next) =&gt; {\n  req.url = req.params.asset;\n  express.static(__dirname + '/static')(req, res, next);\n});         \n\n// Just the asset.\napp.use('/website/*', (req, res, next) =&gt; {\n  req.url = path.basename(req.originalUrl);\n  express.static(__dirname + '/static')(req, res, next);\n});\n</code></pre>\n"}],["50014701",{"id":"50014701","questionId":50014635,"isAccepted":true,"score":4,"created":1524634582,"edited":1568308592,"body":"<p>You can use the <a href=\"https://expressjs.com/en/starter/static-files.html\" rel=\"nofollow noreferrer\">express static middleware</a> to serve static json files from a specified folder.</p>\n\n<pre><code>const express = require('express');\nconst app = express();\n\n// Setup express static middleware to look for files in the api directory for all requests starting with /api\napp.use('/api', express.static('api') , function(req, res){\n    // Optional 404 handler\n    res.status(404);\n    res.json({error:{code:404}})\n});\n\n\nvar server = app.listen(8081, () =&gt; {\n\n   var host = server.address().address\n   var port = server.address().port\n\n   console.log(\"Example app listening at http://%s:%s\", host, port)\n\n})\n</code></pre>\n\n<p>You can then access your <code>user.json</code> in the folder <code>/api/user.json</code> at <code>localhost:8081/api/user.json</code></p>\n\n<p>EDIT:</p>\n\n<p>If you want to be able to add multiple folders, you can create a designated <code>public</code> (you can call it anything, actually) directory and put all your top level folders there.</p>\n\n<p>Consider the following JSON files stored in a nested fashion:</p>\n\n<p><code>/public/api/user.json</code>    [ One level nest in api folder]</p>\n\n<p><code>/public/data/config.json</code> [ One level nest in data folder]</p>\n\n<p><code>/public/data/server/config.json</code> [Two level nest in data -> server folder]</p>\n\n<p>you can then do</p>\n\n<pre><code>const express = require('express');\nconst app = express();\n\n// EDIT: added options to ensure json can be accessed without extension\napp.use(express.static('public',{index:false, extensions:['json']}));\napp.use(function (req, res) {\n    // Optional 404 handler\n    res.status(404);\n    res.json({\n        error: {\n            code: 404\n        }\n    });\n})\n\n\nvar server = app.listen(8081, () =&gt; {\n\n    var host = server.address().address\n    var port = server.address().port\n\n    console.log(\"Example app listening at http://%s:%s\", host, port)\n\n})\n</code></pre>\n\n<p>and then access your files as :</p>\n\n<p><code>localhost:8081/api/user.json</code> OR <code>localhost:8081/api/user</code></p>\n\n<p><code>localhost:8081/data/config.json</code> OR <code>localhost:8081/data/config</code></p>\n\n<p><code>localhost:8081/data/server/config.json</code> OR <code>localhost:8081/data/server/config</code></p>\n\n<p><a href=\"https://www.npmjs.com/package/serve-static#options\" rel=\"nofollow noreferrer\">Reference for options accepted by the express static middleware</a></p>\n\n<hr>\n\n<p><strong>Additional Improvement</strong></p>\n\n<p>NOTE: This method may accidentally expose sensitive server side configuration files [like your <code>package.json</code>] and potentially your entire codebase. <em>Please use this method carefully and only if you know what you are doing</em>.</p>\n\n<p>If you do not want to create a designated directory (in this case 'public' folder) and put all your top level folders there in order to access it, you can use the code below to dynamically serve your files:</p>\n\n<pre><code>const express = require('express');\nconst app = express();\n\nvar publicdir = __dirname + '/';\n\napp.use(express.static(publicdir,{extensions:['json']})); //or ,{index:false, extensions:['json']}\napp.use(function (req, res) {\n\n    res.status(404);\n    res.json({\n        error: {\n            code: 404\n        }\n    });\n})\n\n\nvar server = app.listen(8081, () =&gt; {\n\n    var host = server.address().address\n    var port = server.address().port\n\n    console.log(\"Example app listening at http://%s:%s\", host, port)\n\n})\n</code></pre>\n"}],["57722982",{"id":"57722982","questionId":34870306,"isAccepted":false,"score":0,"created":1567152710,"body":"<p>I wrote this function (in .ts) to get the timescale :</p>\n\n<pre><code>export enum Unit {\n    minute,\n    hour,\n    day,\n    week,\n    month\n};\n\nexport type Duration = {\n    value   : number;\n    unit    : keyof typeof Unit;\n}\n\nconst getTimescale = ( input : string ) =&gt; { \n    const duration = moment.duration(input);\n    const units = Object.keys(Unit).filter(k =&gt; typeof Unit[k as any] === \"number\").reverse() as Array&lt;keyof typeof Unit&gt;;\n\n    let result = {} as Duration;\n    for (let i = 0; i &lt; units.length; i++) {\n        let value = duration.get(units[i] as keyof typeof Unit);\n        if( result.unit &amp;&amp; value ){\n            if( moment.duration(duration, units[i] as keyof typeof Unit).subtract( moment.duration( result.value, result.unit )) &gt; moment.duration(0) ){\n                return { value, unit : units[i] as keyof typeof Unit }\n            } else {\n                return result;\n            }\n        };\n        result = { value, unit : units[i] as keyof typeof Unit };\n    };\n\n    return result;\n} \n</code></pre>\n"}],["57222716",{"id":"57222716","questionId":57222470,"isAccepted":false,"score":0,"created":1564153462,"edited":1564658355,"body":"<p>As mehulmpt said, <code>Array.prototype.push()</code> returns the new length of the array after pushing. However, using <code>concat</code> is extremely slow. Instead, <s>spread</s> slice the first array and <code>push</code> the new value on a separate line:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const arr1 = [\"foo\", \"bar\"];\r\nconst arr2 = arr1.slice();\r\narr2.push(\"moo\");\r\n\r\nconsole.log(arr1, arr2)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>JSPerf <a href=\"https://jsperf.com/spread-push-vs-concat\" rel=\"nofollow noreferrer\">here</a></p>\n\n<p><a href=\"https://i.stack.imgur.com/Lf3Rw.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/Lf3Rw.png\" alt=\"JSPerf\"></a></p>\n\n<p>EDIT: Completely forgot about slice. Slice is faster than spread, use that instead.</p>\n"}],["57064796",{"id":"57064796","questionId":31553155,"isAccepted":false,"score":0,"created":1563307991,"body":"<p>Here is what I did for my use case hope this helps</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var list = {30: \"103\", 40: \"75\", 50: \"116\", 100: \"15\"};\r\n// Reverse sorting on key\r\nconst keysSorted = Object.keys(list).sort(function(a,b){return b-a})\r\nconsole.log(keysSorted);\r\n\r\nconst arr = [];\r\n// Adding the sorted result to an array of object\r\nfor (let i=0; i&lt;keysSorted.length;i++) {\r\n  const obj = {};\r\n  obj.per= keysSorted[i];\r\n  obj.val= list[keysSorted[i]];\r\n  arr.push(obj);\r\n}\r\n\r\nconsole.log(arr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["56809870",{"id":"56809870","questionId":56809727,"isAccepted":false,"score":0,"created":1561737146,"body":"<p>You can declare an auxiliary variable to help you decide which is the next direction in which you need to sort your array. \nSomehting like this:</p>\n\n<pre><code>self.sortTitle = function () {\n    sortArrayAsc = !sortArrayAsc;\n    self.arr= self.arr.sort((a, b) =&gt; sort(a,b, sortArrayAsc));\n}\n\n// ToDo: You can writte this nicer\nself.sort = function (a, b, ascending) {\n    if(ascending) {\n        return a.title &gt; b.title ? 1 : -1;\n    } else {\n        return a.title &gt; b.title ? -1 : 1;\n    }\n}\n\n</code></pre>\n"}],["56809839",{"id":"56809839","questionId":56809727,"isAccepted":false,"score":0,"created":1561737025,"body":"<p>Add a variable to your function and change the conditional</p>\n\n<pre><code>self.sortTitle = function (sortOrder) {\n    if (sortOrder === 'asc') {\n        self.arr= self.arr.sort((a, b) =&gt; (a.title &gt; b.title) ? 1 : -1);\n    } else { //desc\n        self.arr= self.arr.sort((a, b) =&gt; (a.title &lt; b.title) ? 1 : -1);\n    }\n}\n</code></pre>\n"}],["56809837",{"id":"56809837","questionId":56809727,"isAccepted":false,"score":0,"created":1561737014,"body":"<p>You just need to maintain sort type somewhere so that you can toggle it. </p>\n\n<p>There's lots of variants, but something simple like this should work:</p>\n\n<pre><code>const ascendingComparator = (a, b) =&gt; (a.title &gt; b.title) ? 1 : -1;\nconst descendingComparator = (a, b) =&gt; (a.title &gt; b.title) ? -1 : 1;\n\nself.sortTitle = function (type) {\n  if (type === \"ascending\") {\n    self.arr = self.arr.sort(ascendingComparator);\n    type = \"descending\";\n  } else {\n    self.arr = self.arr.sort(descendingComparator);\n    type = \"ascending\";\n  }\n}\n</code></pre>\n"}],["31055535",{"id":"31055535","questionId":31055347,"isAccepted":false,"score":21,"created":1435248793,"edited":1556906642,"body":"<p>I think you are wrong with your route, you can't route to <code>/user/:userId/group</code> and post to <code>/</code> that doesn't make sense. I mean to get <code>userId</code>param, you should post to <code>/user/:userId/group</code>:</p>\n\n<p>Route file <code>route.js</code>:</p>\n\n<pre><code>var ctrl = require('controller.js');\n\napp.route('/user/:userId/group').post(ctrl.doIt);\n</code></pre>\n\n<p>Controller file <code>controller.js</code>:</p>\n\n<pre><code>exports.doIt = function(req, res, next) {\n    var group = new Group(req.body);\n\n    console.log(req.params);\n\n    group.userId = req.params.userId;\n\n    group.save(new dataCallbacks(req, res, next, \"Group\").insert());\n});\n</code></pre>\n"}],["54629762",{"id":"54629762","questionId":54623130,"isAccepted":false,"score":5,"created":1549885109,"body":"<p>Thanks everyone. I solved it by using this option:</p>\n\n<pre><code>data.sort(function(a, b) { return b.score - a.score })\n</code></pre>\n"}],["54623379",{"id":"54623379","questionId":54623130,"isAccepted":false,"score":4,"created":1549853752,"edited":1549854085,"body":"<pre><code>myarray.sort((a,b) =&gt; b.age - a.age)\n</code></pre>\n\n<p>Is the correct answer but nobody has helped with OP's question of having a hard time understanding sort. The function you pass into sort is the comparison function that when comparing two elements of the array should return less than 0 for a comes first, 0 if they are equal and greater than 0 for b comes first.</p>\n\n<p>I use this default comparer function in my projects</p>\n\n<pre><code>defaultCompare = (a, b) =&gt; (!a &amp;&amp; !b ? 0 : !a ? -1 : !b ? 1 : a &lt; b ? -1 : a &gt; b ? 1 : 0);\n</code></pre>\n\n<p>as undefined, null, NaN and other falsey values can throw a spanner in there on you.</p>\n"}],["54623200",{"id":"54623200","questionId":54623130,"isAccepted":false,"score":14,"created":1549852028,"edited":1549852682,"body":"<p><strong>ES6</strong></p>\n\n<pre><code>myarray.sort((a,b) =&gt; b.age - a.age)\n</code></pre>\n\n<p><strong>ES5</strong></p>\n\n<pre><code>myarray.sort(function(a,b){return b.age - a.age})\n</code></pre>\n\n<p>Detailed description of the sort function can be found here\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" rel=\"noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort</a></p>\n\n<p>*Edited to sort in descending order as OP asked</p>\n"}],["32545009",{"id":"32545009","questionId":32544846,"isAccepted":false,"score":3,"created":1442102611,"edited":1544760650,"body":"<p>You do it the other way around you modify url to make your desire effect</p>\n\n<pre><code>app.use('/', function(req,res,next){\n    if(condition){\n        req.url = newURL // add something to lead to different directory\n    }\n    next();\n});\n\napp.use('/', express.static(__dirname + '/public/'));\n// then i start the server\nhttp.createServer(app).listen(port, function() {\n    console.log('HTTP Express server listening on port %s', port);\n});\n</code></pre>\n"}],["53763600",{"id":"53763600","questionId":32544846,"isAccepted":false,"score":1,"created":1544709728,"body":"<p>the result of express.static() is a middleware function, so you can call it dynamically with your condition.</p>\n\n<pre><code>app.get('/', (req, res, next) =&gt; {\n    if (condition) {\n        express.static(__dirname + '/public/')(req, res, next);\n    } else {\n        express.static(__dirname + '/public/someotherpath')(req, res, next);\n    }\n});\n</code></pre>\n"}],["53653186",{"id":"53653186","questionId":53652615,"isAccepted":true,"score":5,"created":1544105191,"edited":1544105588,"body":"<p>Yes there is a better way than writing all routes in one file. For example, let us say you have routes for users and questions. \nFor users, you want get/set/put/delete for profile, and similarly for questions.So you create the following folder structure: <code>/api/users</code> and <code>/api/questions</code>\nIn <code>/api/users</code>,</p>\n\n<pre><code>const express=require('express')\n const router=express.Router()\n\n //this handles route: /users\n router.get('/',(req,res)=&gt;{})\n\n //this handles route: /users/profile\n router.get('/profile',(req,res){})\n\n //this is to retrieve profile of specific user by user id :/users/profile/:userID\n router.get('/profile/:userId',(req,res))\n\n\n router.post('/profile',(req,res))\n .\n .\n</code></pre>\n\n<p>Then, in your index.js or entry point of your project,</p>\n\n<pre><code>const users=require('./api/users')\nconst questions=require('./api/questions')\napp=require('express')\n\napp.use('/users',users)\napp.use('/questions',questions)\n</code></pre>\n\n<p>So in effect, you say for any <code>/users</code> route, refer to the users.js file, for any <code>/questions</code> routes, refer questions.js file and so on</p>\n"}],["53031606",{"id":"53031606","questionId":53030523,"isAccepted":false,"score":1,"created":1540730304,"body":"<p>The <code>req.route</code> is populated only for middleware with a route. But since you are executing console#1 after the request, I believe the <code>req</code> object has already been mutated by then.</p>\n\n<p>I was able to reproduce what you see with this code</p>\n\n<pre><code>const express = require(\"express\");\n\nconst app = express();\n\napp.use(function(req, res, next) {\n  setTimeout(function() {\n    console.log(\"1: \" + JSON.stringify(req.route));\n  }, 2000);\n  next();\n});\n\napp.use(function(req, res, next) {\n  console.log(\"2: Route: \" + JSON.stringify(req.route));\n  console.log(\"2: Path: \" + req.originalUrl);\n  next();\n});\n\napp.get(\"/magic/:id\", function(req, res) {\n  console.log(\"3: \" + JSON.stringify(req.route));\n  res.send(\"Houdini \" + req.params.id);\n});\n\napp.listen(3300, function() {\n  console.log(\"Server UP!\");\n});\n</code></pre>\n\n<p>You can still get the exact path of the request by accessing <code>req.originalUrl</code> like in the code above but that gives you the exact path used and not the matcher defined.</p>\n"}],["3978716",{"id":"3978716","questionId":3978492,"isAccepted":false,"score":26,"created":1287583567,"edited":1540031113,"body":"<p>I put together a quick demo: <a href=\"http://jsbin.com/agugo3/edit\" rel=\"nofollow noreferrer\">http://jsbin.com/agugo3/edit</a></p>\n\n<p>My results on Internet&nbsp;Explorer&nbsp;8 are 156, 782, and 750, which would indicate <code>slice</code> is much faster in this case.</p>\n"}],["52475608",{"id":"52475608","questionId":52475523,"isAccepted":true,"score":2,"created":1537778855,"body":"<p>You pretty much have it:</p>\n\n<pre><code>date_from = new Date(date_to.getTime() - 10 * granularity);\n</code></pre>\n\n<p><code>getTime</code> returns milliseconds-since-the-Epoch, and your granularity values are in milliseconds, and when you pass a number into <code>new Date</code>, it uses it as miliseconds-since-The-Epoch. (You don't technically need the <code>getTime</code> call, since using a date in a subtraction expression will trigger its <code>valueOf</code> method, which for Dates is the same as <code>getTime</code>. But for clarity...)</p>\n\n<p>Example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const MS_PER_DAY = 1000 * 60 * 60 * 24;\r\nconst MS_PER_HOUR = 1000 * 60 * 60;\r\nconst MS_PER_WEEK = 1000 * 60 * 60 * 24 * 7;\r\n\r\nconst date_to = new Date(2018, 8, 1); // Sep 1 2018\r\n\r\nconst granularity = MS_PER_DAY;\r\n\r\nconst date_from = new Date(date_to.getTime() - 10 * granularity);\r\n\r\nconsole.log(\"date_to:     \" + date_to.toISOString());\r\nconsole.log(\"granularity: MS_PER_DAY\");\r\nconsole.log(\"date_from:   \" + date_from.toISOString());</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["50966630",{"id":"50966630","questionId":50966278,"isAccepted":true,"score":2,"created":1529578054,"edited":1529591351,"body":"<p>Write a function to validate users to allow <code>/admin/*</code> route and then use it as follows:</p>\n\n<pre><code>function validate(req, res, next){\n  //logic to verify user, validate session\n  if(user is allowed to access){\n    next();//Proceed to handle the request\n  }\n  else{\n    //end request with 401 as unauthorized\n    res.status(401).send();\n  }\n}\napp.get(\"/admin/*\", validate, function(req, res) {\n    //Actual response to send\n  });\n</code></pre>\n\n<p>You can use validate functionality for any requests which need authorization.</p>\n\n<p>UPDATE: My bad. <code>/admin</code> checks for the URLs ending with <code>/admin</code> only. Hence, <code>/admin/dashboard.html</code> won't work. If you want the authorization check to all URLs that have <code>/admin</code> in the them, then regex pattern can be used like <code>/admin/*</code> and then send response once validated.  Hope this explains your query.</p>\n"}],["50970564",{"id":"50970564","questionId":50966278,"isAccepted":false,"score":0,"created":1529589993,"body":"<p>Thanks to @lifetimeLearner007 and @R.Gulbrandsen who lead me into the right direction.\nFor anyone following up, a combination of both solved it (but dont know why)</p>\n\n<pre><code>app.get(\"/admin/*\", validateUser, function(req, res, next) {\n    console.log(\"Validated\");\n    next();\n  })\n\nfunction validateUser(req, res, next) {\n    console.log(req.session.email)\n    if (req.session.email !== undefined) {\n      console.log(\"User is verified to access\");\n      next();\n    } else {\n      console.log(\"Failed: User not verified, redirect to 404\");\n      return res.redirect(\"/404.html\");\n    }\n  }\n</code></pre>\n"}],["50966540",{"id":"50966540","questionId":50966278,"isAccepted":false,"score":1,"created":1529577785,"body":"<p>I'm not sure if you're having problems with the wildcard url matching, or serving up the static file. Here is an example on how to use a middleware to take care of the authorization and then serve up the static file from a specific endpoint.</p>\n\n<p>It's not a copy paste to solve your problem, but I hope this might help you find a solution.</p>\n\n<pre><code>const authenticate = function(req, res, next) {\n  if (req.sess.email === undefined) {\n    return res.redirect('/404/.html');\n  }\n  next();\n}\n\napp.get('/admin/dashboard.html', auhenticate, function(req, res) {\n    console.log('User is verified to access');\n    return res.sendFile([File location for dashboard.html],\n                        {headers: {'Content-Type': 'text/html'}});\n});\n</code></pre>\n"}],["40796335",{"id":"40796335","questionId":979256,"isAccepted":false,"score":52,"created":1480035726,"edited":1527554367,"body":"<p>If you have an <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\" rel=\"noreferrer\" title=\"ES6\">ES6</a> compliant browser you can use:</p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" rel=\"noreferrer\" title=\"Arrow functions\">Arrow functions</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number%20%22Number%20function\" rel=\"noreferrer\">Number() function</a></li>\n<li><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" rel=\"noreferrer\" title=\"sort function\">sort() function</a></li>\n</ul>\n\n<p>The difference between ascending and descending sort order is the sign of the value returned by your compare function:</p>\n\n<pre><code>var ascending = homes.sort((a, b) =&gt; Number(a.price) - Number(b.price));\nvar descending = homes.sort((a, b) =&gt; Number(b.price) - Number(a.price));\n</code></pre>\n\n<p>Here's a working code snippet:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var homes = [{\r\n  \"h_id\": \"3\",\r\n  \"city\": \"Dallas\",\r\n  \"state\": \"TX\",\r\n  \"zip\": \"75201\",\r\n  \"price\": \"162500\"\r\n}, {\r\n  \"h_id\": \"4\",\r\n  \"city\": \"Bevery Hills\",\r\n  \"state\": \"CA\",\r\n  \"zip\": \"90210\",\r\n  \"price\": \"319250\"\r\n}, {\r\n  \"h_id\": \"5\",\r\n  \"city\": \"New York\",\r\n  \"state\": \"NY\",\r\n  \"zip\": \"00010\",\r\n  \"price\": \"962500\"\r\n}];\r\n\r\nhomes.sort((a, b) =&gt; Number(a.price) - Number(b.price));\r\nconsole.log(\"ascending\", homes);\r\n\r\nhomes.sort((a, b) =&gt; Number(b.price) - Number(a.price));\r\nconsole.log(\"descending\", homes);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["41876250",{"id":"41876250","questionId":41875679,"isAccepted":true,"score":52,"created":1485442507,"edited":1524047625,"body":"<p>MomentJS can calculate all that for you without you doing any logic.</p>\n\n<ul>\n<li>First find the difference between the two moments</li>\n<li>Express it as a Duration</li>\n<li>Then display whichever component <code>.days()</code>, <code>.hours()</code> of the duration that you want.</li>\n</ul>\n\n<p>Note: You can also express the entire duration <code>.asDays()</code>, <code>.asHours()</code> etc if you want.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const now = moment(\"2017-01-26T14:21:22+0000\");\r\nconst expiration = moment(\"2017-01-29T17:24:22+0000\");\r\n\r\n// get the difference between the moments\r\nconst diff = expiration.diff(now);\r\n\r\n//express as a duration\r\nconst diffDuration = moment.duration(diff);\r\n\r\n// display\r\nconsole.log(\"Days:\", diffDuration.days());\r\nconsole.log(\"Hours:\", diffDuration.hours());\r\nconsole.log(\"Minutes:\", diffDuration.minutes());</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://momentjs.com/downloads/moment.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["47194061",{"id":"47194061","questionId":12462318,"isAccepted":false,"score":20,"created":1510202600,"body":"<p>One line answer.\nYou can use filter function to get result.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var array = [\r\n    { name:\"string 1\", value:\"this\", other: \"that\" },\r\n    { name:\"string 2\", value:\"this\", other: \"that\" }\r\n];\r\n\r\nconsole.log(array.filter(function(arr){return arr.name == 'string 1'})[0]);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["45136640",{"id":"45136640","questionId":16548586,"isAccepted":false,"score":2,"created":1500269849,"edited":1500270202,"body":"<p>Although this is somewhat old, though of sharing the way i do this. Here is a another approach which makes code more cleaner and easy to add routes.</p>\n\n<p><strong>app.js</strong></p>\n\n<pre><code>const app = express();\nconst routes = require('./routes');\napp.use('/api', routes); //Main entry point\n</code></pre>\n\n<p><strong>/routes/index.js</strong></p>\n\n<pre><code>const router = require('express').Router();\nconst user = require('./user');\nconst admin = require('./admin'); \n\n//This is a simple route\nrouter.get('/health-check', (req, res) =&gt;\n    res.send('OK')\n);\n\nrouter.route('/users')\n      .post(validate, user.createUser);\n\nrouter.route('/users/:userId')\n      .get(validateUser, user.getUser)  \n      .patch(validateUser, user.updateUser)\n      .delete(validateUser, user.deleteUser);\n\nrouter.route('/admins/:adminId/dashboard')\n      .get(validateAdmin,admin.getDashboard);\n\nmodule.exports = router;\n</code></pre>\n\n<p>'validateUser' and 'validateAdmin' are custom middle wares, which will be used to validates request parameters or to do some pre-processing before request reach the actual request handler. This is optional and you can have multiple middleware (comma separated) as well. </p>\n\n<p><strong>/routes/user.js</strong></p>\n\n<pre><code>module.exports = {\n  createUser:function(req,res,next){\n\n  },\n  updateUser:function(req,res,next){\n\n  },\n  deleteUser:function(req,res,next){\n\n  }\n}\n</code></pre>\n\n<p><strong>/routes/admin.js</strong></p>\n\n<pre><code>module.exports = {\n  getDashboard:function(req,res,next){\n\n  }\n}\n</code></pre>\n"}],["16548987",{"id":"16548987","questionId":16548586,"isAccepted":true,"score":26,"created":1368551386,"edited":1495456379,"body":"<p>The trouble is:</p>\n\n<pre><code> routes = require('./routes'),\n user = require('./routes/user'),\n furniture = require('./routes/furniture'),\n</code></pre>\n\n<p>These 3 are setting your routes folders, not a specific file, express will look for a index.js ( not found, then --> error)</p>\n\n<p>Inside these folders, you should put a index.js with your:</p>\n\n<pre><code>exports.xxxx =  function(req, res){\n    res.render('xx', { foo: foo});\n};\n</code></pre>\n\n<p>Then, your project folder structure should look like:</p>\n\n<pre><code>routes/\n  ‚îú‚îÄ‚îÄ index.js\n  ‚îÇ\n  ‚îú‚îÄ‚îÄ user/\n  ‚îÇ     ‚îî‚îÄ‚îÄ index.js (with a exports.user inside)\n  ‚îÇ   \n  ‚îî‚îÄ‚îÄ fourniture/\n        ‚îî‚îÄ‚îÄ index.js (with a exports.furniture inside)\n</code></pre>\n\n<p>You can add <strong>multiple export functions</strong> to a route like these:</p>\n\n<p>app.js</p>\n\n<pre><code>// a folder called routes with the index.js file inside\nroutes = require('./routes')\n\n.\n.\n.\n\napp.get('/', routes.main_function);  \napp.get('/sec_route', routes.sec_function);\napp.post('/other_route', routes.other_function);\n</code></pre>\n\n<p>/routes/index.js </p>\n\n<pre><code>exports.main_function =  function(req, res){\n    res.render('template1', { foo: foo });\n};\n\nexports.sec_function =  function(req, res){\n    res.render('template2', { bar: bar });\n};\n\nexports.other_function =  function(req, res){\n    res.render('template1', { baz: baz });\n};\n</code></pre>\n"}],["42523934",{"id":"42523934","questionId":42523881,"isAccepted":true,"score":35,"created":1488346331,"edited":1488346786,"body":"<p><strong>EDIT</strong></p>\n\n<p>Deep clone use <code>JSON.parse(JSON.stringify(arr));</code></p>\n\n<p>Shallow clone Use <code>slice(0);</code></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = [{'obj1':1}, {'obj2':2}];\r\nvar clone = arr.slice(0);\r\nconsole.log(clone);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = [{'obj1':1}, {'obj2':2}]\r\nvar clone = JSON.parse(JSON.stringify(arr));\r\nconsole.log(clone);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["41640902",{"id":"41640902","questionId":27182023,"isAccepted":false,"score":16,"created":1484331008,"edited":1484332354,"body":"<p>You ask:</p>\n\n<blockquote>\n  <p>I'd like to have a function that compares the two dates and if(seconds > 60) then it returns minutes, if(minutes > 60) return hours and if(hours > 24) return days and so on.</p>\n</blockquote>\n\n<p>I'm assuming that you're trying to build a string representation of the elapsed time between two dates. Rather than writing your own code to do that, Apple already has a class designed to do precisely that. Namely, use <a href=\"https://developer.apple.com/reference/foundation/datecomponentsformatter\" rel=\"noreferrer\"><code>DateComponentsFormatter</code></a>, set <a href=\"https://developer.apple.com/reference/foundation/datecomponentsformatter/1410216-allowedunits\" rel=\"noreferrer\"><code>allowedUnits</code></a> to whatever values make sense to your app, set <a href=\"https://developer.apple.com/reference/foundation/datecomponentsformatter/1413441-unitsstyle\" rel=\"noreferrer\"><code>unitsStyle</code></a> to whatever you want (e.g. <code>.full</code>), and then call <a href=\"https://developer.apple.com/reference/foundation/datecomponentsformatter/1415967-string\" rel=\"noreferrer\"><code>string(from:to:)</code></a>.</p>\n\n<p>E.g. in Swift 3:</p>\n\n<pre><code>let previousDate = ...\nlet now = Date()\n\nlet formatter = DateComponentsFormatter()\nformatter.unitsStyle = .full\nformatter.allowedUnits = [.month, .day, .hour, .minute, .second]\nformatter.maximumUnitCount = 2   // often, you don't care about seconds if the elapsed time is in months, so you'll set max unit to whatever is appropriate in your case\n\nlet string = formatter.string(from: previousDate, to: now)\n</code></pre>\n\n<p>This also will localize the string appropriate for the device in question.</p>\n\n<p>Or, in Swift 2.3:</p>\n\n<pre><code>let previousDate = ...\nlet now = NSDate()\n\nlet formatter = NSDateComponentsFormatter()\nformatter.unitsStyle = .Full\nformatter.allowedUnits = [.Month, .Day, .Hour, .Minute, .Second]\nformatter.maximumUnitCount = 2\n\nlet string = formatter.stringFromDate(previousDate, toDate: now)\n</code></pre>\n\n<hr>\n\n<p>If you're looking for the actual numeric values, just use <code>dateComponents</code>. E.g. in Swift 3:</p>\n\n<pre><code>let components = Calendar.current.dateComponents([.month, .day, .hour, .minute, .second], from: previousDate, to: now)\n</code></pre>\n\n<p>Or, in Swift 2.3:</p>\n\n<pre><code>let components = NSCalendar.currentCalendar().components([.Month, .Day, .Hour, .Minute, .Second], fromDate: previousDate, toDate: now, options: [])\n</code></pre>\n"}],["40427039",{"id":"40427039","questionId":40426965,"isAccepted":false,"score":1,"created":1478275224,"body":"<p>Give this a shot it looks for a decimal separator but you can remove that part if youd like:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>\t{\r\n\t  number = parseFloat(number);\r\n\t  //if number is any one of the following then set it to 0 and return\r\n\t  if (isNaN(number)) {\r\n\t    return ('0' + '{!decimalSeparator}' + '00');\r\n\t  }\r\n\r\n\t  number = Math.round(number * 100) / 100; //number rounded to 2 decimal places\r\n\t  var numberString = number.toString();\r\n\t  numberString = numberString.replace('.', '{!decimalSeparator}');\r\n\r\n\t  var loc = numberString.lastIndexOf('{!decimalSeparator}'); //getting position of decimal seperator\r\n\t  if (loc != -1 &amp;&amp; numberString.length - 2 == loc) {\r\n\t    //Adding one 0 to number if it has only one digit after decimal\r\n\t    numberString += '0';\r\n\t  } else if (loc == -1 || loc == 0) {\r\n\t    //Adding a decimal seperator and two 00 if the number does not have a decimal separator\r\n\t    numberString += '{!decimalSeparator}' + '00';\r\n\t  }\r\n\t  loc = numberString.lastIndexOf('{!decimalSeparator}'); //getting position of decimal seperator id it is changed after adding 0\r\n\t  var newNum = numberString.substr(loc, 3);\r\n\t  // Logic to add thousands seperator after every 3 digits \r\n\t  var count = 0;\r\n\t  for (var i = loc - 1; i &gt;= 0; i--) {\r\n\t    if (count != 0 &amp;&amp; count % 3 == 0) {\r\n\t      newNum = numberString.substr(i, 1) + '{!thousandSeparator}' + newNum;\r\n\t    } else {\r\n\t      newNum = numberString.substr(i, 1) + newNum;\r\n\t    }\r\n\t    count++;\r\n\t  }\r\n\r\n// return newNum if youd like\r\n\t};</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["40427035",{"id":"40427035","questionId":40426965,"isAccepted":true,"score":19,"created":1478275215,"body":"<pre><code>function formatMoney(number) {\n  return number.toLocaleString('en-US', { style: 'currency', currency: 'USD' });\n}\n\nconsole.log(formatMoney(10000));   // $10,000.00\nconsole.log(formatMoney(1000000)); // $1,000,000.00\n</code></pre>\n"}],["39873377",{"id":"39873377","questionId":3978492,"isAccepted":false,"score":37,"created":1475668815,"body":"<pre><code>var cloned_array = [].concat(target_array);\n</code></pre>\n"}],["33097318",{"id":"33097318","questionId":12462318,"isAccepted":false,"score":13,"created":1444723531,"edited":1495542887,"body":"<h1>New answer</h1>\n\n<p>I added the prop as a parameter, to make it more general and reusable</p>\n\n<pre><code>/**\n * Represents a search trough an array.\n * @function search\n * @param {Array} array - The array you wanna search trough\n * @param {string} key - The key to search for\n * @param {string} [prop] - The property name to find it in\n */\n\nfunction search(array, key, prop){\n    // Optional, but fallback to key['name'] if not selected\n    prop = (typeof prop === 'undefined') ? 'name' : prop;    \n\n    for (var i=0; i &lt; array.length; i++) {\n        if (array[i][prop] === key) {\n            return array[i];\n        }\n    }\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>var array = [\n    { \n        name:'string 1', \n        value:'this', \n        other: 'that' \n    },\n    { \n        name:'string 2', \n        value:'this', \n        other: 'that' \n    }\n];\n\nsearch(array, 'string 1');\n// or for other cases where the prop isn't 'name'\n// ex: prop name id\nsearch(array, 'string 1', 'id');\n</code></pre>\n\n<p>Mocha test:</p>\n\n<pre><code>var assert = require('chai').assert;\n\ndescribe('Search', function() {\n    var testArray = [\n        { \n            name: 'string 1', \n            value: 'this', \n            other: 'that' \n        },\n        { \n            name: 'string 2', \n            value: 'new', \n            other: 'that' \n        }\n    ];\n\n    it('should return the object that match the search', function () {\n        var name1 = search(testArray, 'string 1');\n        var name2 = search(testArray, 'string 2');\n\n        assert.equal(name1, testArray[0]);\n        assert.equal(name2, testArray[1]);\n\n        var value1 = search(testArray, 'this', 'value');\n        var value2 = search(testArray, 'new', 'value');\n\n        assert.equal(value1, testArray[0]);\n        assert.equal(value2, testArray[1]);\n    });\n\n    it('should return undefined becuase non of the objects in the array have that value', function () {\n        var findNonExistingObj = search(testArray, 'string 3');\n\n        assert.equal(findNonExistingObj, undefined);\n    });\n\n    it('should return undefined becuase our array of objects dont have ids', function () {\n        var findById = search(testArray, 'string 1', 'id');\n\n        assert.equal(findById, undefined);\n    });\n});\n</code></pre>\n\n<p>test results:</p>\n\n<pre><code>Search\n    ‚úì should return the object that match the search\n    ‚úì should return undefined becuase non of the objects in the array have that value\n    ‚úì should return undefined becuase our array of objects dont have ids\n\n\n  3 passing (12ms)\n</code></pre>\n\n<h1>Old answer - removed due to bad practices</h1>\n\n<p>if you wanna know more why it's bad practice then see this article:</p>\n\n<p><a href=\"https://stackoverflow.com/questions/14034180/why-is-extending-native-objects-a-bad-practice\">Why is extending native objects a bad practice?</a></p>\n\n<p><s>Prototype version of doing an array search: </p>\n\n<pre><code>Array.prototype.search = function(key, prop){\n    for (var i=0; i &lt; this.length; i++) {\n        if (this[i][prop] === key) {\n            return this[i];\n        }\n    }\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>var array = [\n    { name:'string 1', value:'this', other: 'that' },\n    { name:'string 2', value:'this', other: 'that' }\n];\n\narray.search('string 1', 'name');\n</code></pre>\n\n<p></s></p>\n"}],["37003268",{"id":"37003268","questionId":37002681,"isAccepted":false,"score":29,"created":1462275969,"body":"<p>As others have said you're subtracting from the numeric values returned from methods like <code>date.getDate()</code>, you need to reset those values on your date variable. I've created a method below that will do this for you. It creates a date using <code>new Date()</code> which will initialize with the current date, then sets the date, month, and year according to the values passed in. For example, if you want to go back 6 days then pass in -6 like so <code>var newdate = createDate(-6,0,0)</code>. If you don't want to set a value pass in a zero (or you could set default values). The method will return the new date for you (tested in Chrome and Firefox).</p>\n\n<pre><code>function createDate(days, months, years) {\n        var date = new Date(); \n        date.setDate(date.getDate() + days);\n        date.setMonth(date.getMonth() + months);\n        date.setFullYear(date.getFullYear() + years);\n        return date;    \n    }\n</code></pre>\n"}],["37002800",{"id":"37002800","questionId":37002681,"isAccepted":true,"score":139,"created":1462274668,"body":"<p>You are simply reducing the values from a number. So substracting 6 from 3 (date) will return -3 only.</p>\n\n<p>You need to individually add/remove unit of time in date object</p>\n\n<pre><code>var date = new Date();\ndate.setDate( date.getDate() - 6 );\ndate.setFullYear( date.getFullYear() - 1 );\n$(\"#searchDateFrom\").val((date.getMonth() ) + '/' + (date.getDate()) + '/' + (date.getFullYear()));\n</code></pre>\n"}],["16565245",{"id":"16565245","questionId":16548586,"isAccepted":false,"score":6,"created":1368621616,"edited":1461334778,"body":"<p>If your website is so big some times I prefer to do something like: </p>\n\n<p><code>routes/furniture.js</code>:</p>\n\n<pre><code>module.exports = function(app)\n{\n    app.get(\"/furniture/\", function(req, res) {\n        res.render('furniture', { title: '4\\267plieee' });\n    });\n}\n</code></pre>\n\n<p>And then in <code>app.js</code>:</p>\n\n<pre><code>require(\"./routes/furniture\")(app);\n</code></pre>\n\n<p>It's mainly the same but app.js will be cleaner.</p>\n"}],["3923228",{"id":"3923228","questionId":676824,"isAccepted":false,"score":1005,"created":1286970203,"edited":1461057444,"body":"<p>I suggest to use DateTime and DateInterval objects.</p>\n\n<pre><code>$date1 = new DateTime(\"2007-03-24\");\n$date2 = new DateTime(\"2009-06-26\");\n$interval = $date1-&gt;diff($date2);\necho \"difference \" . $interval-&gt;y . \" years, \" . $interval-&gt;m.\" months, \".$interval-&gt;d.\" days \"; \n\n// shows the total amount of days (not divided into years, months and days like above)\necho \"difference \" . $interval-&gt;days . \" days \";\n</code></pre>\n\n<p>read more <a href=\"http://www.php.net/manual/en/datetime.diff.php\" rel=\"noreferrer\">php DateTime::diff manual</a></p>\n\n<p>From the manual:</p>\n\n<blockquote>\n  <p>As of PHP 5.2.2, DateTime objects can be compared using comparison operators. </p>\n</blockquote>\n\n<pre><code>$date1 = new DateTime(\"now\");\n$date2 = new DateTime(\"tomorrow\");\n\nvar_dump($date1 == $date2); // bool(false)\nvar_dump($date1 &lt; $date2);  // bool(true)\nvar_dump($date1 &gt; $date2);  // bool(false)\n</code></pre>\n"}],["34870441",{"id":"34870441","questionId":34870306,"isAccepted":false,"score":1,"created":1453187012,"body":"<p>from the docs you can get:\n<a href=\"http://momentjs.com/docs/#/durations/as-json/\" rel=\"nofollow\">http://momentjs.com/docs/#/durations/as-json/</a></p>\n\n<pre><code>moment.duration().toJSON();\n</code></pre>\n\n<p>When serializing a duration object to JSON, it will be be represented as an ISO8601 string.</p>\n\n<pre><code>JSON.stringify({\n    postDuration : moment.duration(5, 'm')\n}); // '{\"postDuration\":\"PT5M\"}'\n</code></pre>\n"}],["34255728",{"id":"34255728","questionId":34247283,"isAccepted":true,"score":36,"created":1450037142,"edited":1495542879,"body":"<pre><code>// parse time using 24-hour clock and use UTC to prevent DST issues\nvar start = moment.utc(startTime, \"HH:mm\");\nvar end = moment.utc(endTime, \"HH:mm\");\n\n// account for crossing over to midnight the next day\nif (end.isBefore(start)) end.add(1, 'day');\n\n// calculate the duration\nvar d = moment.duration(end.diff(start));\n\n// subtract the lunch break\nd.subtract(30, 'minutes');\n\n// format a string result\nvar s = moment.utc(+d).format('H:mm');\n</code></pre>\n\n<p>Pay close attention to the casing of the formats.  You were using <code>hh</code> which is for a 12-hour clock.</p>\n\n<p>See also:  <a href=\"https://stackoverflow.com/questions/18623783/get-the-time-difference-between-two-datetimes\">Get the time difference between two datetimes</a></p>\n"}],["31553613",{"id":"31553613","questionId":31553155,"isAccepted":false,"score":0,"created":1437537481,"edited":1495535059,"body":"<p>In Paulpro answer, I edit javascript array sort function (easy to understand):</p>\n\n<pre><code>function compare(a,b) {\n   if (a.date &lt; b.date )\n     return -1;\n   if (a.date  &gt; b.date )\n    return 1;\n   return 0;\n}\narr.sort(compare);\n</code></pre>\n\n<p>Here is my example: <a href=\"http://jsfiddle.net/vwkvpdkv/\" rel=\"nofollow noreferrer\">enter link description here</a></p>\n\n<p>Here is relative post: <a href=\"https://stackoverflow.com/questions/1129216/sort-array-of-objects-by-string-property-value-in-javascript\">enter link description here</a></p>\n"}],["31553219",{"id":"31553219","questionId":31553155,"isAccepted":true,"score":20,"created":1437534730,"edited":1437535762,"body":"<p>No, that isn't an array, it's an object, and Javascript objects' properties are unordered by definition; so sorting them is meaningless. </p>\n\n<p>You could instead use an array, which does have order, and restructure your data like this:</p>\n\n<pre><code>var arr = [\n  { date: 1436796000000, value: [\"Task1\",\"Task2\"] },\n  { date: 1437400800000, value: [\"Task4\",\"Task8\"] },\n  { date: 1436968800000, value: [\"Task3\",\"Task2\"] },\n  { date: 1436882400000, value: [\"Task5\",\"Task6\"] }\n]\n</code></pre>\n\n<p>and then you can sort it by date:</p>\n\n<pre><code>arr.sort( function ( a, b ) { return b.date - a.date; } );\n</code></pre>\n\n<p>If you don't want to restructure your data, you can iterate through it in the order you want, by getting an array of its keys and sorting that array, then using that array to access your object's properties, but you will need to do this each time your want to iterate through it in a particular order, since there is still no order information stored in the object:</p>\n\n<pre><code>// Get the array of keys\nvar keys = Object.keys( obj );\n\n// Sort the keys in descending order\nkeys.sort( function ( a, b ) { return b - a; } );\n\n// Iterate through the array of keys and access the corresponding object properties\nfor ( var i = 0; i &lt; keys.length; i++ ) {\n    console.log( keys[i], obj[ keys[i] ] );\n}\n</code></pre>\n\n<p>You will need to shim <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys#Polyfill/\" rel=\"noreferrer\">Object.keys</a> to support IE 8 and older browsers.</p>\n"}],["979278",{"id":"979278","questionId":979256,"isAccepted":false,"score":150,"created":1244693468,"edited":1433920056,"body":"<p>To sort it you need to create a comparator function taking two arguments. Then call the sort function with that comparator function as follows:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>// a and b are object elements of your array\nfunction mycomparator(a,b) {\n  return parseInt(a.price, 10) - parseInt(b.price, 10);\n}\nhomes.sort(mycomparator);\n</code></pre>\n\n<p>If you want to sort ascending switch the expressions on each side of the minus sign.</p>\n"}],["28918943",{"id":"28918943","questionId":28918845,"isAccepted":true,"score":63,"created":1425756065,"body":"<blockquote>\n  <p>Today most websites are not static documents anymore but are files that get altered by javascript by manipulating the DOM, so I don't think any html files should be considered as static files?</p>\n</blockquote>\n\n<p>The files for your pages themselves are still static.  That is, you are not creating them dynamically with server-side code.  What happens in the browser doesn't matter in this context... the idea is that you do not need to generate these files on the fly, as their content does not change.</p>\n\n<blockquote>\n  <p>I understand javascript files that are included in html or css are best stored in the client directory?</p>\n</blockquote>\n\n<p>Where you store your files on the server doesn't matter.  What does matter is that you don't generally want to serve static files from your Node.js application.  Tools like <code>express.static</code> are for convenience only.  Sometimes, you may have a low traffic application.  In these cases, it is perfectly acceptable to serve files with your Node.js app.  For anything with a decent traffic load, it's best to leave static serving up to a real web server such as Nginx, since these servers are far more efficient than your Node.js application.</p>\n\n<p>You should keep your application code (code that serves dynamic responses, such as an API server) within your Node.js application.</p>\n\n<p>It's also a good idea to put your Node.js application behind a proxy like Nginx so that the proxy can handle all of the client interaction (such as spoon-feeding slow clients) leaving your Node.js application to do what it does best.  Again though, in low traffic situations it doesn't matter.</p>\n"}],["28086959",{"id":"28086959","questionId":14934452,"isAccepted":false,"score":70,"created":1421923976,"edited":1425601527,"body":"<pre><code>app._router.stack.forEach(function(r){\n  if (r.route &amp;&amp; r.route.path){\n    console.log(r.route.path)\n  }\n})\n</code></pre>\n"}],["26744045",{"id":"26744045","questionId":17987647,"isAccepted":true,"score":1566,"created":1415131593,"edited":1424124141,"body":"<p>Use this to transform a moment object into a date object:</p>\n\n<p>From <a href=\"http://momentjs.com/docs/#/displaying/as-javascript-date/\">http://momentjs.com/docs/#/displaying/as-javascript-date/</a></p>\n\n<pre><code>moment().toDate();\n</code></pre>\n\n<p>Yields:</p>\n\n<pre><code>Tue Nov 04 2014 14:04:01 GMT-0600 (CST)\n</code></pre>\n"}],["24176311",{"id":"24176311","questionId":24042697,"isAccepted":true,"score":8,"created":1402546331,"edited":1402664985,"body":"<p>Well, an http server is nothing but an <code>EventEmitter</code>. It has a <code>request</code> event which is the one that handles the requests coming from the clients.</p>\n\n<p>So, one thing you can do is to make a wrapper function around the current handler function. For instance, let's suppose the existence of some express application:</p>\n\n<pre><code>var express = require('express');\nvar app = express();\n\napp.get('/', function(req, res){\n    res.send('Hello World!');\n});\n\nvar server = app.listen(8080);\n</code></pre>\n\n<p>So, now, you can simply go over the list of currently registered <code>request</code> listeners in the server, remove the old listener functions and wrap them in a new one that handles your request the way you want. For instance, you can now create your own router and determine through which pipeline to send a request depending on its contents (i.e. path, content type, accepted languages, etc).</p>\n\n<pre><code>server.listeners('request').forEach(function(listener){\n    server.removeListener('request', listener);\n    server.on('request', function(req, res){\n        console.log('Before');\n        listener(req,res);\n        console.log('After');\n    });\n});\n</code></pre>\n\n<p>In the example above you can see that I run a couple of <code>console.log</code> statements around the actual execution of the listener function. In this case the listener function is actually the Express main <code>request</code> handler. The express handler represents a pipeline, and by creating this new wrapper function you just added a new pipe at the beginning of the pipeline.</p>\n\n<p>This technique would allow you to handle the request first and decide whether you want to send your own response and terminate the request here, or send it through a different pipeline or send the request down the express pipeline (i.e. the old listener function available to your new request handler closure).</p>\n"}],["14934933",{"id":"14934933","questionId":14934452,"isAccepted":true,"score":297,"created":1361185915,"edited":1398943910,"body":"<h1>express 3.x</h1>\n\n<p>Okay, found it myself ... it's just <code>app.routes</code> :-)</p>\n\n<h1>express 4.x</h1>\n\n<p><a href=\"http://expressjs.com/4x/api.html#express\">Applications</a> - built with <code>express()</code></p>\n\n<blockquote>\n  <p><code>app._router.stack</code></p>\n</blockquote>\n\n<p><a href=\"http://expressjs.com/4x/api.html#router\">Routers</a> - built with <code>express.Router()</code></p>\n\n<blockquote>\n  <p><code>router.stack</code></p>\n</blockquote>\n\n<p><strong>Note</strong>: The stack includes the middleware functions too, it should be filtered to get the <em>\"routes\"</em> only.</p>\n"}],["22872861",{"id":"22872861","questionId":22872740,"isAccepted":true,"score":2,"created":1396644980,"body":"<p>There are 2 ways you could do this (maybe more, I'm not a Node Pro yet).</p>\n\n<p>First, you could serve the file statically with:</p>\n\n<pre><code>app.use(express.static(__dirname + '/public')); //put file in /public\n</code></pre>\n\n<p>Or you could use the <code>fs</code> module and read it in.</p>\n\n<pre><code>app.get(\"/fileRoute\",function(req,res) {\n    fs.readFile(\"./path/to/file.ext\",\"utf8\",function(err,html) {\n        res.send(html);\n    });\n});\n</code></pre>\n\n<p>Personally I suggest just serving <code>log.txt</code> statically in a public folder.</p>\n"}],["10185427",{"id":"10185427","questionId":10183291,"isAccepted":true,"score":935,"created":1334639523,"edited":1393622982,"body":"<ol>\n<li><p>The protocol is available as <code>req.protocol</code>. <a href=\"http://expressjs.com/api.html#req.protocol\">docs here</a></p>\n\n<ol>\n<li>Before express 3.0, the protocol you can assume to be <code>http</code> unless you see that <code>req.get('X-Forwarded-Protocol')</code> is set and has the value <code>https</code>, in which case you know that's your protocol</li>\n</ol></li>\n<li><p>The host comes from <code>req.get('host')</code> as Gopal has indicated</p></li>\n<li><p>Hopefully you don't need a non-standard port in your URLs, but if you did need to know it you'd have it in your application state because it's whatever you passed to <code>app.listen</code> at server startup time. However, in the case of local development on a non-standard port, Chrome seems to include the port in the host header so <code>req.get('host')</code> returns <code>localhost:3000</code>, for example. So at least for the cases of a production site on a standard port and browsing directly to your express app (without reverse proxy), the <code>host</code> header seems to do the right thing regarding the port in the URL.</p></li>\n<li><p>The path comes from <code>req.originalUrl</code> (thanks @pgrassant). Note this DOES include the query string. <a href=\"http://expressjs.com/api.html#req.originalUrl\">docs here on req.url and req.originalUrl</a>. Depending on what you intend to do with the URL, <code>originalUrl</code> may or may not be the correct value as compared to <code>req.url</code>.</p></li>\n</ol>\n\n<p>Combine those all together to reconstruct the absolute URL.</p>\n\n<pre><code>  var fullUrl = req.protocol + '://' + req.get('host') + req.originalUrl;\n</code></pre>\n"}],["12900176",{"id":"12900176","questionId":12900058,"isAccepted":true,"score":90,"created":1350319397,"edited":1350320485,"body":"<p>I think it's better done just with...</p>\n\n<pre><code>items.sort(function(a, b) { \n  return a.id - b.id  ||  a.name.localeCompare(b.name);\n});\n</code></pre>\n\n<p>The second sort will basically negate the first one, so you have to do it once. ) </p>\n\n<p><code>a.id - b.id  ||  a.name.localeCompare(b.name)</code> expression will first compare the <code>id</code>s; only if they are equal, it will compare the names (and return the result of this comparison). </p>\n\n<p>If you need to reverse the ordering, swap the positions (<code>b.id - a.id</code>, etc.) - or just negate the whole thing:</p>\n\n<pre><code>items.sort(function(a, b) { \n  return - ( a.id - b.id  ||  a.name.localeCompare(b.name) );\n});\n</code></pre>\n\n<p>Here's the <a href=\"http://jsfiddle.net/FCZUV/\">JSFiddle</a> (have to simplify the data a bit to show my point).</p>\n"}],["12462406",{"id":"12462406","questionId":12462318,"isAccepted":false,"score":24,"created":1347895464,"body":"<p>Either use a simple <code>for</code>-loop:</p>\n\n<pre><code>var result = null;\nfor (var i = 0; i &lt; array.length; i++) { \n  if (array[i].name === \"string 1\") { \n    result = array[i];\n    break;\n  } \n}\n</code></pre>\n\n<p>Or if you can, that is, if your browser supports it, use <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/filter\"><code>Array.filter</code></a>, which is much more terse:</p>\n\n<pre><code>var result = array.filter(function (obj) {\n  return obj.name === \"string 1\";\n})[0];\n</code></pre>\n"}],["12462387",{"id":"12462387","questionId":12462318,"isAccepted":true,"score":313,"created":1347895416,"edited":1669123103,"body":"<p>You can loop over the array and test for that property:\n<div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function search(nameKey, myArray){\n    for (let i=0; i &lt; myArray.length; i++) {\n        if (myArray[i].name === nameKey) {\n            return myArray[i];\n        }\n    }\n}\n\nconst array = [\n    { name:\"string 1\", value:\"this\", other: \"that\" },\n    { name:\"string 2\", value:\"this\", other: \"that\" }\n];\n\nconst resultObject = search(\"string 1\", array);\nconsole.log(resultObject)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["16233919",{"id":"16233919","questionId":149055,"isAccepted":false,"score":2562,"created":1366970996,"edited":1666549519,"body":"<h1><a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/NumberFormat\" rel=\"noreferrer\">Intl.NumberFormat</a></h1>\n<p>JavaScript has a number formatter (part of the Internationalization API).</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Create our number formatter.\nconst formatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n\n  // These options are needed to round to whole numbers if that's what you want.\n  //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n  //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n});\n\nconsole.log(formatter.format(2500)); /* $2,500.00 */</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Use <code>undefined</code> in place of the first argument (<code>'en-US'</code> in the example) to use the system locale (the user locale in case the code is running in a browser). <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\" rel=\"noreferrer\">Further explanation of the locale code</a>.</p>\n<p>Here's a <a href=\"https://www.iban.com/currency-codes\" rel=\"noreferrer\">list of the currency codes</a>.</p>\n<h2>Intl.NumberFormat vs Number.prototype.toLocaleString</h2>\n<p>A final note comparing this to the older .<code>toLocaleString</code>. They both offer essentially the same functionality. However, toLocaleString in its older incarnations (pre-Intl) <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.4.3\" rel=\"noreferrer\">does not actually support locales</a>: it uses the system locale. So when debugging old browsers, be sure that you're using the correct version (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString#Checking_for_support_for_locales_and_options_arguments\" rel=\"noreferrer\">MDN suggests to check for the existence of <code>Intl</code></a>). There isn't any need to worry about this at all if you don't care about old browsers or just use the <a href=\"https://github.com/andyearnshaw/Intl.js\" rel=\"noreferrer\">shim</a>.</p>\n<p>Also, the performance of both is the same for a <em>single</em> item, but if you have a lot of numbers to format, using <code>Intl.NumberFormat</code> is ~70 times faster. Therefore, it's usually best to use <code>Intl.NumberFormat</code> and instantiate only once per page load. Anyway, here's the equivalent usage of <code>toLocaleString</code>:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log((2500).toLocaleString('en-US', {\n  style: 'currency',\n  currency: 'USD',\n})); /* $2,500.00 */</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h3>Some notes on browser support and Node.js</h3>\n<ul>\n<li>Browser support is no longer an issue nowadays with 98% support globally, 99% in the US and 99+% in the EU</li>\n<li>There is a <a href=\"https://github.com/andyearnshaw/Intl.js\" rel=\"noreferrer\">shim</a> to support it on fossilized browsers (like <a href=\"https://en.wikipedia.org/wiki/Internet_Explorer_8\" rel=\"noreferrer\">Internet¬†Explorer¬†8</a>), should you really need to</li>\n<li>Node.js before v13 only supports <code>en-US</code> out of the box. One solution is to install <a href=\"https://github.com/icu-project/full-icu-npm\" rel=\"noreferrer\">full-icu</a>, see <a href=\"https://stackoverflow.com/a/39626602/1000608\">here</a> for more information</li>\n<li>Have a look at <a href=\"https://caniuse.com/#feat=internationalization\" rel=\"noreferrer\">CanIUse</a> for more information</li>\n</ul>\n"}],["1063027",{"id":"1063027","questionId":1063007,"isAccepted":true,"score":1857,"created":1246358824,"edited":1663832462,"body":"<p>By default, the sort method sorts elements alphabetically. To sort numerically just add a new method which handles numeric sorts (sortNumber, shown below) -</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var numArray = [140000, 104, 99];\nnumArray.sort(function(a, b) {\n  return a - b;\n});\n\nconsole.log(numArray);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Documentation:</p>\n<p>Mozilla <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" rel=\"noreferrer\"><code>Array.prototype.sort()</code></a> recommends this compare function for arrays that don't contain Infinity or NaN.  (Because <code>Infinity - Infinity</code> is NaN, not 0).</p>\n<p>Also examples of sorting objects by key.</p>\n"}],["69702802",{"id":"69702802","questionId":6116474,"isAccepted":false,"score":19,"created":1635135109,"edited":1660375817,"body":"<p>we can use <strong>includes</strong> option (which is js built-in function), which will return true if the value is found else it will be false.</p>\n<p>if you want the exact index you can use <strong>indexOf</strong> (which is also js built-in function), which will return the exact index if the value is found else it will return -1.</p>\n<p>You can switch <strong>.includes</strong> with the <strong>.some</strong> method which returns a boolean.\nIt will exit as soon as a match was found, which is great for performance for huge arrays:</p>\n<p>Note: all are case sensitive</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var myarr = [\"I\", \"like\", \"turtles\"];\n\nisVal = myarr.includes('like')\nindex = myarr.indexOf('like')\nsome = myarr.some(item =&gt; item.toLowerCase() == 'like'.toLowerCase())\n\n\nconsole.log(isVal)\nconsole.log(index)\nconsole.log(some)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>please check this.</p>\n"}],["122704",{"id":"122704","questionId":122102,"isAccepted":true,"score":5633,"created":1222193377,"edited":1659295327,"body":"<h1>Native deep cloning</h1>\n<p>There's now a JS standard called <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/structuredClone\" rel=\"noreferrer\">&quot;structured cloning&quot;</a>, that works experimentally in Node 11 and later, will land in browsers, and which has <a href=\"https://www.npmjs.com/package/@ungap/structured-clone\" rel=\"noreferrer\">polyfills for existing systems</a>.</p>\n<pre><code>structuredClone(value)\n</code></pre>\n<p>If needed, loading the polyfill first:</p>\n<pre><code>import structuredClone from '@ungap/structured-clone';\n</code></pre>\n<p>See <a href=\"https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript/10916838#10916838\">this answer</a> for more details.</p>\n<h1>Older answers</h1>\n<h2>Fast cloning with data loss - JSON.parse/stringify</h2>\n<p>If you do not use <code>Date</code>s, functions, <code>undefined</code>, <code>Infinity</code>, RegExps, Maps, Sets, Blobs, FileLists, ImageDatas, sparse Arrays, Typed Arrays or other complex types within your object, a very simple one liner to deep clone an object is:</p>\n<p><code>JSON.parse(JSON.stringify(object))</code></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const a = {\n  string: 'string',\n  number: 123,\n  bool: false,\n  nul: null,\n  date: new Date(),  // stringified\n  undef: undefined,  // lost\n  inf: Infinity,  // forced to 'null'\n  re: /.*/,  // lost\n}\nconsole.log(a);\nconsole.log(typeof a.date);  // Date object\nconst clone = JSON.parse(JSON.stringify(a));\nconsole.log(clone);\nconsole.log(typeof clone.date);  // result of .toISOString()</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>See <a href=\"https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript/5344074#5344074\">Corban's answer</a> for benchmarks.</p>\n<h2>Reliable cloning using a library</h2>\n<p>Since cloning objects is not trivial (complex types, circular references, function etc.), most major libraries provide function to clone objects. <strong>Don't reinvent the wheel</strong> - if you're already using a library, check if it has an object cloning function. For example,</p>\n<ul>\n<li>lodash - <a href=\"https://lodash.com/docs#cloneDeep\" rel=\"noreferrer\"><code>cloneDeep</code></a>; can be imported separately via the <a href=\"https://www.npmjs.com/package/lodash.clonedeep\" rel=\"noreferrer\">lodash.clonedeep</a> module and is probably your best choice if you're not already using a library that provides a deep cloning function</li>\n<li>AngularJS - <a href=\"https://docs.angularjs.org/api/ng/function/angular.copy\" rel=\"noreferrer\"><code>angular.copy</code></a></li>\n<li>jQuery - <a href=\"https://api.jquery.com/jquery.extend/#jQuery-extend-deep-target-object1-objectN\" rel=\"noreferrer\"><code>jQuery.extend(true, { }, oldObject)</code></a>; <code>.clone()</code> only clones DOM elements</li>\n<li>just library - <a href=\"https://www.npmjs.com/package/just-clone\" rel=\"noreferrer\"><code>just-clone</code></a>; Part of a library of zero-dependency npm modules that do just do one thing.\nGuilt-free utilities for every occasion.</li>\n</ul>\n"}],["72840660",{"id":"72840660","questionId":72840594,"isAccepted":true,"score":1,"created":1656779037,"edited":1656780230,"body":"<p>Looking at the code of the library, the <code>.generate()</code> method doesn't return anything, so your <code>file</code> variable will be <code>undefined</code> (I also have no idea what the <code>Buffer.from()</code> is doing‚Ä¶).</p>\n<p>Instead, you can use <a href=\"https://expressjs.com/en/4x/api.html#res.attachment\" rel=\"nofollow noreferrer\"><code>res.attachment()</code></a> and <a href=\"https://expressjs.com/en/4x/api.html#res.sendFile\" rel=\"nofollow noreferrer\"><code>res.sendFile()</code></a>:</p>\n<pre><code>await myInvoice.generate(&quot;example.pdf&quot;);\nres.attachment().sendFile('example.pdf', { root : __dirname });\n</code></pre>\n<p>Be aware that every request will overwrite the file, which may not be what you want.</p>\n<p><strong>EDIT</strong>: looking closer, you can make <code>generate()</code> return the document by not passing any arguments to it. In that case, you can prevent a local file from being written:</p>\n<pre><code>const doc = myInvoice.generate();\n\ndoc.pipe( res.attachment('invoice.pdf') );\n</code></pre>\n<p>(untested)</p>\n"}],["56380963",{"id":"56380963","questionId":12525928,"isAccepted":false,"score":83,"created":1559229138,"edited":1655749055,"body":"<p>Here is an example expanded from the documentation, which nicely wraps all you need to know about accessing the paths/URLs in all cases with express:</p>\n<pre><code>app.use('/admin', function (req, res, next) { // GET 'http://www.example.com/admin/new?a=b'\n  console.dir(req.originalUrl) // '/admin/new?a=b' (WARNING: beware query string)\n  console.dir(req.baseUrl) // '/admin'\n  console.dir(req.path) // '/new'\n  console.dir(req.baseUrl + req.path) // '/admin/new' (full path without query string)\n  next()\n})\n</code></pre>\n<p>Based on: <a href=\"https://expressjs.com/en/api.html#req.originalUrl\" rel=\"noreferrer\">https://expressjs.com/en/api.html#req.originalUrl</a></p>\n<p><strong>Conclusion:</strong> As <a href=\"https://stackoverflow.com/a/44788142/4465895\">c1moore's answer</a> states, use:</p>\n<pre><code>var fullPath = req.baseUrl + req.path;\n</code></pre>\n"}],["21514254",{"id":"21514254","questionId":3978492,"isAccepted":false,"score":309,"created":1391364664,"edited":1649965499,"body":"<p>Technically <code>slice</code> <em>is</em> the fastest way. <em>However</em>, it is even faster if you add the <code>0</code> begin index.</p>\n<pre><code>myArray.slice(0);\n</code></pre>\n<p>is faster than</p>\n<pre><code>myArray.slice();\n</code></pre>\n<p><a href=\"https://jsben.ch/F0SZ3\" rel=\"noreferrer\">https://jsben.ch/F0SZ3</a></p>\n"}],["70456155",{"id":"70456155","questionId":70456060,"isAccepted":false,"score":-1,"created":1640215390,"edited":1640216613,"body":"<p>You don't need multiple routes to serve your static contents, and the <code>static</code> method of <code>express</code> do such kind of tasks for you:</p>\n<pre class=\"lang-js prettyprint-override\"><code>// If your 'public' or 'static' directory is one of root directories\napp.use(express.static(process.cwd() + '/public'));\n\n// so all these requests will be served:\n// -&gt; /public/styles/custom.css\n// -&gt; /public/scripts/pollyfils.js\n// -&gt; /public/media/logo.png\n</code></pre>\n"}],["70456247",{"id":"70456247","questionId":70456060,"isAccepted":true,"score":1,"created":1640216341,"body":"<p>Resources loaded in the sign up folder should use URLs beginning with a '<code>/</code>' character, to make them relative to the site root, e.g.</p>\n<pre><code>src=&quot;/scripts/modulefile.js&quot;\nhref=&quot;/css/stylesheet.css&quot;\nhref=&quot;/media/image.png&quot;\n</code></pre>\n<p>and not urls relative to the signup folder - which they will be if the leading <code>'/'</code> is omitted.</p>\n"}],["69888300",{"id":"69888300","questionId":69877117,"isAccepted":true,"score":0,"created":1636396277,"body":"<p>Unfortunately, the only solution I found was to turn my <code>/public</code> folder into a flat structure and do:</p>\n<pre><code>app.get('/', ensureLoggedIn('/auth/facebook'), (req,res) =&gt; {\n  res.sendFile(__dirname + '/public/index.html')\n})\n\napp.get('/:filename', ensureLoggedIn('/auth/facebook'), (req,res) =&gt; {\n  res.sendFile(__dirname + `/public/${req.params.filename}`)\n})\n</code></pre>\n"}],["69877679",{"id":"69877679","questionId":69877117,"isAccepted":false,"score":0,"created":1636332662,"edited":1636332977,"body":"<p>If your auth is implemented by this:</p>\n<pre><code>app.use('/public', ensureLoggedIn('/auth/facebook'));\n</code></pre>\n<p>Then, you either run that before your <code>express.static()</code> route like this:</p>\n<pre><code>app.use(ensureLoggedIn('/auth/facebook'));\napp.use(express.static(__dirname + '/public'));\n</code></pre>\n<p>Or, you incorporate it specifically into the static route:</p>\n<pre><code>app.use(ensureLoggedIn('/auth/facebook'), express.static(__dirname + '/public'));\n</code></pre>\n<hr />\n<blockquote>\n<p>When I also include the first 2 lines, not even the index.html gets served. I only get a failed facebook redirect registered on the network panel.</p>\n</blockquote>\n<p>Then, your auth middleware is either correctly denying access to an unauthorized client or your auth middleware is not working properly.  There's nothing in your question that indicates which that might be or could allow us to diagnose that for you.</p>\n<blockquote>\n<p>But all other static files fail to be served.</p>\n</blockquote>\n<p>For us to help you with that, we'd have to see the specifics of a static file that is not serving correctly (URL in the web page, location of the resource in your file system, etc...).  There are 4-5 common mistakes people make to get static files to work properly.  The most common is just using the wrong URL in the web page for static resources such as images, CSS files, script files, etc...</p>\n"}],["69701611",{"id":"69701611","questionId":6116474,"isAccepted":false,"score":10,"created":1635119680,"edited":1635125510,"body":"<h1>With modern javascript's Array methods:</h1>\n<p><em><strong>Array.prototype.includes()</strong></em> // introduced in ES7:</p>\n<ul>\n<li>returns boolean</li>\n</ul>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const data = {\n  categories: [\n    \"specialword\",\n    \"word1\",\n    \"word2\"\n  ]\n}\n\nconsole.log(\"Array.prototype.includes()\")\n// Array.prototype.includes()\n// returns boolean\nconsole.log(data.categories.includes(\"specialword\"))\nconsole.log(data.categories.includes(\"non-exist\"))</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.as-console-wrapper { max-height: 100% !important; top: 0; }</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><em><strong>Array.prototype.find()</strong></em> // introduced in ES6:</p>\n<ul>\n<li>returns found element or undefined</li>\n</ul>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const data = {\n  categories: [\n    \"specialword\",\n    \"word1\",\n    \"word2\"\n  ]\n}\n\nconsole.log(\"Array.prototype.find()\")\n// Array.prototype.find()\n// returns the element if found\n// returns undefined if not found\nconsole.log(data.categories.find(el =&gt; el === \"specialword\") != undefined)\nconsole.log(data.categories.find(el =&gt; el === \"non-exist\") != undefined)</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.as-console-wrapper { max-height: 100% !important; top: 0; }</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["29046869",{"id":"29046869","questionId":16333790,"isAccepted":false,"score":244,"created":1426320765,"edited":1632311196,"body":"<p>If you do not want to use ready tool, you can use the code below, as demonstrated by me at <a href=\"https://developer.mozilla.org/en-US/docs/Node_server_without_framework\" rel=\"noreferrer\">https://developer.mozilla.org/en-US/docs/Node_server_without_framework</a>:</p>\n<pre><code>var http = require('http');\nvar fs = require('fs');\nvar path = require('path');\n\nhttp.createServer(function (request, response) {\n    console.log('request starting...');\n\n    var filePath = '.' + request.url;\n    if (filePath == './')\n        filePath = './index.html';\n\n    var extname = path.extname(filePath);\n    var contentType = 'text/html';\n    switch (extname) {\n        case '.js':\n            contentType = 'text/javascript';\n            break;\n        case '.css':\n            contentType = 'text/css';\n            break;\n        case '.json':\n            contentType = 'application/json';\n            break;\n        case '.png':\n            contentType = 'image/png';\n            break;      \n        case '.jpg':\n            contentType = 'image/jpg';\n            break;\n        case '.wav':\n            contentType = 'audio/wav';\n            break;\n    }\n\n    fs.readFile(filePath, function(error, content) {\n        if (error) {\n            if(error.code == 'ENOENT'){\n                fs.readFile('./404.html', function(error, content) {\n                    response.writeHead(200, { 'Content-Type': contentType });\n                    response.end(content, 'utf-8');\n                });\n            }\n            else {\n                response.writeHead(500);\n                response.end('Sorry, check with the site admin for error: '+error.code+' ..\\n');\n                response.end(); \n            }\n        }\n        else {\n            response.writeHead(200, { 'Content-Type': contentType });\n            response.end(content, 'utf-8');\n        }\n    });\n\n}).listen(8125);\nconsole.log('Server running at http://127.0.0.1:8125/');\n</code></pre>\n<p><strong>UPDATE</strong>\nIf you need to access your server from external demand/file, you need to overcome the CORS, in your node.js file by writing the below, as I mentioned in a previous answer <a href=\"https://stackoverflow.com/questions/25761481/simple-ajax-request-to-localhost-nodejs-server/28089807#28089807\">here</a></p>\n<pre><code>// Website you wish to allow to connect\nresponse.setHeader('Access-Control-Allow-Origin', '*');\n\n// Request methods you wish to allow\nresponse.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n\n// Request headers you wish to allow\nresponse.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\n\n// Set to true if you need the website to include cookies in the requests sent\n// to the API (e.g. in case you use sessions)\nresponse.setHeader('Access-Control-Allow-Credentials', true);\n</code></pre>\n<p><strong>UPDATE</strong></p>\n<p>As Adrian mentioned, in the comments, he wrote an ES6 code with full explanation <a href=\"http://adrianmejia.com/blog/2016/08/24/Building-a-Node-js-static-file-server-files-over-HTTP-using-ES6/\" rel=\"noreferrer\">here</a>, I just re-posting his code below, in case the code gone from the original site for any reason:</p>\n<pre><code>const http = require('http');\nconst url = require('url');\nconst fs = require('fs');\nconst path = require('path');\nconst port = process.argv[2] || 9000;\n\nhttp.createServer(function (req, res) {\n  console.log(`${req.method} ${req.url}`);\n\n  // parse URL\n  const parsedUrl = url.parse(req.url);\n  // extract URL path\n  let pathname = `.${parsedUrl.pathname}`;\n  // based on the URL path, extract the file extension. e.g. .js, .doc, ...\n  const ext = path.parse(pathname).ext;\n  // maps file extension to MIME typere\n  const map = {\n    '.ico': 'image/x-icon',\n    '.html': 'text/html',\n    '.js': 'text/javascript',\n    '.json': 'application/json',\n    '.css': 'text/css',\n    '.png': 'image/png',\n    '.jpg': 'image/jpeg',\n    '.wav': 'audio/wav',\n    '.mp3': 'audio/mpeg',\n    '.svg': 'image/svg+xml',\n    '.pdf': 'application/pdf',\n    '.doc': 'application/msword'\n  };\n\n  fs.exists(pathname, function (exist) {\n    if(!exist) {\n      // if the file is not found, return 404\n      res.statusCode = 404;\n      res.end(`File ${pathname} not found!`);\n      return;\n    }\n\n    // if is a directory search for index file matching the extension\n    if (fs.statSync(pathname).isDirectory()) pathname += '/index' + ext;\n\n    // read file from file system\n    fs.readFile(pathname, function(err, data){\n      if(err){\n        res.statusCode = 500;\n        res.end(`Error getting the file: ${err}.`);\n      } else {\n        // if the file is found, set Content-type and send data\n        res.setHeader('Content-type', map[ext] || 'text/plain' );\n        res.end(data);\n      }\n    });\n  });\n\n\n}).listen(parseInt(port));\n\nconsole.log(`Server listening on port ${port}`);\n</code></pre>\n"}],["68489611",{"id":"68489611","questionId":68489291,"isAccepted":false,"score":0,"created":1626977062,"body":"<p>If the <code>absolute</code> path to the <code>/dist</code> directory is known, I suggest not using <code>Path.resolve</code> and instead using <code>process.cwd()</code>, or <code>__dirname</code> (in combination) to access <code>/dist</code>.</p>\n<pre class=\"lang-js prettyprint-override\"><code>\napp.get('/dist', express.static(process.cwd() + '/dist'));\n\n</code></pre>\n<p>ref: <a href=\"https://stackoverflow.com/a/9874415/16471349\">https://stackoverflow.com/a/9874415/16471349</a></p>\n"}],["68244233",{"id":"68244233","questionId":65115458,"isAccepted":false,"score":0,"created":1625397804,"body":"<pre><code>const express = require('express');\nconst path = require('path');\nconst app = express();\napp.use('/public',express.static(path.join(__dirname,'static')));\napp.get('/',(req,res)=&gt; {\n          res.sendFile(path.join(__dirname,'static','index.html');\n         });\napp.listen(3000);\n</code></pre>\n"}],["37626980",{"id":"37626980","questionId":149055,"isAccepted":false,"score":11,"created":1465020550,"edited":1622114335,"body":"<p>I found this from: <a href=\"http://openexchangerates.github.io/accounting.js/\" rel=\"nofollow noreferrer\">accounting.js</a>. It's very easy and perfectly fits my need.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Default usage:\naccounting.formatMoney(12345678); // $12,345,678.00\n\n// European formatting (custom symbol and separators), can also use options object as second parameter:\naccounting.formatMoney(4999.99, \"‚Ç¨\", 2, \".\", \",\"); // ‚Ç¨4.999,99\n\n// Negative values can be formatted nicely:\naccounting.formatMoney(-500000, \"¬£ \", 0); // ¬£ -500,000\n\n// Simple `format` string allows control of symbol position (%v = value, %s = symbol):\naccounting.formatMoney(5318008, { symbol: \"GBP\",  format: \"%v %s\" }); // 5,318,008.00 GBP\n\n// Euro currency symbol to the right\naccounting.formatMoney(5318008, {symbol: \"‚Ç¨\", precision: 2, thousand: \".\", decimal : \",\", format: \"%v%s\"}); // 1.008,00‚Ç¨ </code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["149371",{"id":"149371","questionId":149055,"isAccepted":false,"score":8,"created":1222704164,"edited":1622064020,"body":"<p>A minimalistic approach that just meets the original requirements:</p>\n<pre><code>function formatMoney(n) {\n    return &quot;$ &quot; + (Math.round(n * 100) / 100).toLocaleString();\n}\n</code></pre>\n<p><a href=\"https://stackoverflow.com/questions/149055/how-to-format-numbers-as-currency-strings#comment43766_149371\">@Daniel Magliola</a>: You're right. The above was a hasty, incomplete implementation. Here's the corrected implementation:</p>\n<pre><code>function formatMoney(n) {\n    return &quot;$ &quot; + n.toLocaleString().split(&quot;.&quot;)[0] + &quot;.&quot;\n        + n.toFixed(2).split(&quot;.&quot;)[1];\n}\n</code></pre>\n"}],["149126",{"id":"149126","questionId":149055,"isAccepted":false,"score":9,"created":1222701469,"edited":1619898911,"body":"<p>The <a href=\"https://en.wikipedia.org/wiki/Yahoo!_UI_Library\" rel=\"nofollow noreferrer\">YUI</a> codebase uses the following formatting:</p>\n<pre><code>format: function(nData, oConfig) {\n    oConfig = oConfig || {};\n\n    if(!YAHOO.lang.isNumber(nData)) {\n        nData *= 1;\n    }\n\n    if(YAHOO.lang.isNumber(nData)) {\n        var sOutput = nData + &quot;&quot;;\n        var sDecimalSeparator = (oConfig.decimalSeparator) ? oConfig.decimalSeparator : &quot;.&quot;;\n        var nDotIndex;\n\n        // Manage decimals\n        if(YAHOO.lang.isNumber(oConfig.decimalPlaces)) {\n            // Round to the correct decimal place\n            var nDecimalPlaces = oConfig.decimalPlaces;\n            var nDecimal = Math.pow(10, nDecimalPlaces);\n            sOutput = Math.round(nData*nDecimal)/nDecimal + &quot;&quot;;\n            nDotIndex = sOutput.lastIndexOf(&quot;.&quot;);\n\n            if(nDecimalPlaces &gt; 0) {\n                // Add the decimal separator\n                if(nDotIndex &lt; 0) {\n                    sOutput += sDecimalSeparator;\n                    nDotIndex = sOutput.length-1;\n                }\n                // Replace the &quot;.&quot;\n                else if(sDecimalSeparator !== &quot;.&quot;){\n                    sOutput = sOutput.replace(&quot;.&quot;,sDecimalSeparator);\n                }\n                // Add missing zeros\n                while((sOutput.length - 1 - nDotIndex) &lt; nDecimalPlaces) {\n                    sOutput += &quot;0&quot;;\n                }\n            }\n        }\n\n        // Add the thousands separator\n        if(oConfig.thousandsSeparator) {\n            var sThousandsSeparator = oConfig.thousandsSeparator;\n            nDotIndex = sOutput.lastIndexOf(sDecimalSeparator);\n            nDotIndex = (nDotIndex &gt; -1) ? nDotIndex : sOutput.length;\n            var sNewOutput = sOutput.substring(nDotIndex);\n            var nCount = -1;\n            for (var i=nDotIndex; i&gt;0; i--) {\n                nCount++;\n                if ((nCount%3 === 0) &amp;&amp; (i !== nDotIndex)) {\n                    sNewOutput = sThousandsSeparator + sNewOutput;\n                }\n                sNewOutput = sOutput.charAt(i-1) + sNewOutput;\n            }\n            sOutput = sNewOutput;\n        }\n\n        // Prepend prefix\n        sOutput = (oConfig.prefix) ? oConfig.prefix + sOutput : sOutput;\n\n        // Append suffix\n        sOutput = (oConfig.suffix) ? sOutput + oConfig.suffix : sOutput;\n\n        return sOutput;\n    }\n    // Still not a number. Just return it unaltered\n    else {\n        return nData;\n    }\n}\n</code></pre>\n<p>It would need editing as the YUI library is configurable, like replacing oConfig.decimalSeparator with &quot;.&quot;.</p>\n"}],["149099",{"id":"149099","questionId":149055,"isAccepted":false,"score":1949,"created":1222701152,"edited":1619898468,"body":"<h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\" rel=\"noreferrer\">Number.prototype.toFixed</a></h2>\n<p>This solution is compatible with every single major browser:</p>\n<pre><code>  const profits = 2489.8237;\n\n  profits.toFixed(3) // Returns 2489.824 (rounds up)\n  profits.toFixed(2) // Returns 2489.82\n  profits.toFixed(7) // Returns 2489.8237000 (pads the decimals)\n</code></pre>\n<p>All you need is to add the currency symbol (e.g. <code>&quot;$&quot; + profits.toFixed(2)</code>) and you will have your amount in dollars.</p>\n<h2>Custom function</h2>\n<p>If you require the use of <code>,</code> between each digit, you can use this function:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function formatMoney(number, decPlaces, decSep, thouSep) {\n    decPlaces = isNaN(decPlaces = Math.abs(decPlaces)) ? 2 : decPlaces,\n    decSep = typeof decSep === \"undefined\" ? \".\" : decSep;\n    thouSep = typeof thouSep === \"undefined\" ? \",\" : thouSep;\n    var sign = number &lt; 0 ? \"-\" : \"\";\n    var i = String(parseInt(number = Math.abs(Number(number) || 0).toFixed(decPlaces)));\n    var j = (j = i.length) &gt; 3 ? j % 3 : 0;\n\n    return sign +\n        (j ? i.substr(0, j) + thouSep : \"\") +\n        i.substr(j).replace(/(\\decSep{3})(?=\\decSep)/g, \"$1\" + thouSep) +\n        (decPlaces ? decSep + Math.abs(number - i).toFixed(decPlaces).slice(2) : \"\");\n}\n\ndocument.getElementById(\"b\").addEventListener(\"click\", event =&gt; {\n  document.getElementById(\"x\").innerText = \"Result was: \" + formatMoney(document.getElementById(\"d\").value);\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;label&gt;Insert your amount: &lt;input id=\"d\" type=\"text\" placeholder=\"Cash amount\" /&gt;&lt;/label&gt;\n&lt;br /&gt;\n&lt;button id=\"b\"&gt;Get Output&lt;/button&gt;\n&lt;p id=\"x\"&gt;(press button to get output)&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Use it like so:</p>\n<pre><code>(123456789.12345).formatMoney(2, &quot;.&quot;, &quot;,&quot;);\n</code></pre>\n<p>If you're always going to use '.' and ',', you can leave them off your method call, and the method will default them for you.</p>\n<pre><code>(123456789.12345).formatMoney(2);\n</code></pre>\n<p>If your culture has the two symbols flipped (i.e., Europeans) and you would like to use the defaults, just paste over the following two lines in the <code>formatMoney</code> method:</p>\n<pre><code>    d = d == undefined ? &quot;,&quot; : d,\n    t = t == undefined ? &quot;.&quot; : t,\n</code></pre>\n<h2>Custom function (ES6)</h2>\n<p>If you can use modern ECMAScript syntax (i.e., through Babel), you can use this simpler function instead:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function formatMoney(amount, decimalCount = 2, decimal = \".\", thousands = \",\") {\n  try {\n    decimalCount = Math.abs(decimalCount);\n    decimalCount = isNaN(decimalCount) ? 2 : decimalCount;\n\n    const negativeSign = amount &lt; 0 ? \"-\" : \"\";\n\n    let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();\n    let j = (i.length &gt; 3) ? i.length % 3 : 0;\n\n    return\n      negativeSign +\n      (j ? i.substr(0, j) + thousands : '') +\n      i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands) +\n      (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : \"\");\n  } catch (e) {\n    console.log(e)\n  }\n};\n\ndocument.getElementById(\"b\").addEventListener(\"click\", event =&gt; {\n  document.getElementById(\"x\").innerText = \"Result was: \" + formatMoney(document.getElementById(\"d\").value);\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;label&gt;Insert your amount: &lt;input id=\"d\" type=\"text\" placeholder=\"Cash amount\" /&gt;&lt;/label&gt;\n&lt;br /&gt;\n&lt;button id=\"b\"&gt;Get Output&lt;/button&gt;\n&lt;p id=\"x\"&gt;(press button to get output)&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["67176368",{"id":"67176368","questionId":67176299,"isAccepted":true,"score":2,"created":1618911665,"edited":1618927554,"body":"<p>You're not <em>modifying</em> the array entries.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\" rel=\"nofollow noreferrer\"><code>splice</code></a> <em>replaces</em> an array entry. Think of those objects as pointers to a piece of memory:</p>\n<pre><code>const array = [A, B];\nconst cloneArray = [...array];\n//    ^ cloneArray = [A, B]\n\nconst newObject = C;\ncloneArray.splice(1,1,newObject);\n//    ^ cloneArray = [A, C]\n</code></pre>\n<p>Now, if you were to change the <em>contents</em> of <code>A</code>:</p>\n<pre><code>array[0].foo = 'Bar';\n// Or\ncloneArray[0].foo = 'Bar';\n</code></pre>\n<p>Then you'd see the change in both your source array, as well as in the clone.</p>\n"}],["67172775",{"id":"67172775","questionId":67172096,"isAccepted":true,"score":2,"created":1618895256,"body":"<p>OK, So I am answering my own question here.\nAfter refering to @jdmayfield 's answer and searching about MIME type errors I reached <a href=\"https://stackoverflow.com/questions/48778619/node-express-refused-to-apply-style-because-its-mime-type-text-html\">link</a> to this link.</p>\n<p>I realised that when you set the pubic folder as static in node, Then that public folder should not be added in the path to css or images in html</p>\n<p>Meaning that\nIn the folder structure given above if we want to link css in html the code we use is</p>\n<pre><code>&lt;link href=&quot;./public/css/index.css&quot; rel=&quot;stylesheet&quot;&gt;\n</code></pre>\n<p>And this gave me a MIME type error.\nSo I changed the above code to</p>\n<pre><code>&lt;link href=&quot;css/index.css&quot; rel=&quot;stylesheet&quot;&gt;\n</code></pre>\n<p>This worked.</p>\n<p>However if You independently open the HTML file by going live in vscode, the css and images wont load. But when served with node they will be served.</p>\n"}],["67172346",{"id":"67172346","questionId":67172096,"isAccepted":false,"score":1,"created":1618891919,"edited":1618893686,"body":"<p>UPDATED POST:</p>\n<p>In light of the recent comment by @Nav giving the error regarding mime-type, here is a snippet I found at <a href=\"https://stackoverflow.com/questions/7109732/express-setting-content-type-based-on-path-file\">Express: Setting content-type based on path/file?</a></p>\n<p>&quot;The Express documentation shows that it can do this if you pass in the\nfile name.&quot;</p>\n<pre><code>var filePath = 'path/to/image.png';\nres.contentType(path.basename(filePath));\n// Content-Type is now &quot;image/png&quot;\n</code></pre>\n<p>Try this example first.  If that does not work, reload and check Dev console for different errors.  It is possible there is more than one cause of your issue.</p>\n<p>ORIGINAL POST:</p>\n<p>Based on the code you have submitted, I think your problem is the default CORS policy.  You need to incorporate a method of allowing Cross-Origin Resource Sharing between the domains, ports, and protocols you are using.  I found a good document detailing CORS explicitly, but succinctly, with a solution that appears specifically suited to your needs.  You might open the Dev console in your browser and look for similar error messages as outlined in the document to confirm.</p>\n<p>Here's the link:</p>\n<p><a href=\"https://flaviocopes.com/express-cors/\" rel=\"nofollow noreferrer\">https://flaviocopes.com/express-cors/</a></p>\n"}],["66258942",{"id":"66258942","questionId":66258861,"isAccepted":false,"score":2,"created":1613647315,"edited":1613669963,"body":"<p>if your foldering is like the following photo you can do like this:\n<a href=\"https://i.stack.imgur.com/NhPH1.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/NhPH1.png\" alt=\"enter image description here\" /></a></p>\n<pre><code>app.get('/about', (req, res) =&gt; {\n  res.sendFile(__dirname + '/views/about.html');\n});\n\napp.get('/contact', (req, res) =&gt; {\n  res.sendFile(__dirname + '/views/contact.html');\n});\napp.get('/', (req, res) =&gt; {\n  res.sendFile(__dirname + '/views/home.html');\n});\n\n</code></pre>\n"}],["65116954",{"id":"65116954","questionId":65115458,"isAccepted":true,"score":2,"created":1606947376,"edited":1606969163,"body":"<p>Just defining the <code>/files</code> route before serving the static files might work:</p>\n<pre class=\"lang-js prettyprint-override\"><code>// Define `/files` route first\napp.use(&quot;/files&quot;, function (req, res) {\n  return res.send(&quot;I will be served instead of a files directory&quot;);\n});\n\n// Static\napp.use(&quot;/&quot;, express.static(__dirname));\n</code></pre>\n"}],["64302312",{"id":"64302312","questionId":64297528,"isAccepted":true,"score":1,"created":1602407188,"edited":1602407735,"body":"<pre class=\"lang-js prettyprint-override\"><code>let num = 3400/100;\nconsole.log(num.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2}));\n</code></pre>\n<p>will output &gt; 34.00</p>\n<p>I notice in your code that you are using <strong>'de-DE'</strong> that will always format the currency to use comas <code>,</code> as the decimal marker, if you change your code to use <strong>'en-IN'</strong> will use dot <code>.</code> as the decimal marker.</p>\n<p>You can read all about it <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\" rel=\"nofollow noreferrer\">here</a></p>\n"}],["64297598",{"id":"64297598","questionId":64297528,"isAccepted":false,"score":-1,"created":1602359300,"body":"<p>divide the price by 100 and if you want the last two decimal point like <code>38.00</code> try this <code>let price = (3800/100).toFixed(2)</code></p>\n"}],["63711768",{"id":"63711768","questionId":63711537,"isAccepted":true,"score":1,"created":1599072166,"body":"<p>You have to tell Express where the root directory of your static files is. Usually in the wild - this directory is called <code>public</code> and will contain all of your css, js files, which you want to ship to the browser. Do <strong>not</strong> include <code>views</code> or any other backend files.</p>\n<p>So in your case: create a new directory called <code>public</code> and put <code>assets</code> and <code>components</code> in there.</p>\n<p>Then in your Express server:</p>\n<pre><code>app.use(express.static(`${srcDir}/app/public`));\n</code></pre>\n<ul>\n<li>Docs: <a href=\"https://expressjs.com/en/starter/static-files.html\" rel=\"nofollow noreferrer\">https://expressjs.com/en/starter/static-files.html</a></li>\n</ul>\n"}],["62861645",{"id":"62861645","questionId":62861485,"isAccepted":false,"score":0,"created":1594560173,"edited":1594562172,"body":"<p>if you want keep your original data without mutate it you could use <code>map</code> or <code>Object.assign</code></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const arr1 = [ { department: \"Lebensmittel\", id: \"id6\", product: \"Nudeln\", status: false }, { department: \"Ceralien\", id: \"id5\", product: \"Marmelade\", status: false }, { department: \"Ceralien\", id: \"id3\", product: \"M√ºsli\", status: false }, { department: \"Ceralien\", id: \"id4\", product: \"Honig\", status: false }, { department: \"Molkereiprodukte\", id: \"id1\", product: \"Milch\", status: false } ];\n   \nconst newarray=  arr1.map(o=&gt;({...o,[\"status\"]:\"test\"}))\n console.log(arr1)\n console.log(newarray)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["62861559",{"id":"62861559","questionId":62861485,"isAccepted":true,"score":4,"created":1594559665,"edited":1594561745,"body":"<p><code>arr1</code> contains objects, so just cloning <code>arr1</code> is not enough. You need to clone the objects in the <code>arr1</code> too.</p>\n<p>You can use <code>.map()</code> function and the spread operator to create a new array that contains clones of the objects in <code>arr1</code>.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const arr1 = [\n  { department: \"Lebensmittel\", id: \"id6\", product: \"Nudeln\", status: false },\n  { department: \"Ceralien\", id: \"id5\", product: \"Marmelade\", status: false },\n  { department: \"Ceralien\", id: \"id3\", product: \"M√ºsli\", status: false },\n  { department: \"Ceralien\", id: \"id4\", product: \"Honig\", status: false },\n  { department: \"Molkereiprodukte\", id: \"id1\", product: \"Milch\", status: false }\n];\n\nlet testArr = arr1.map(obj =&gt; ({...obj}));\n\ntestArr.forEach(obj =&gt; (obj.status = \"test\"));\n\nconsole.log(arr1[0]);\nconsole.log(testArr[0]);</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.as-console-wrapper { max-height: 100% !important; top: 0; } </code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Using <code>.map()</code> function allows you to update the returned objects as well. So you could remove <code>forEach</code> loop and just use <code>.map()</code> function to not only clone the objects but also update the <code>status</code> property of the cloned object.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const arr1 = [\n  { department: \"Lebensmittel\", id: \"id6\", product: \"Nudeln\", status: false },\n  { department: \"Ceralien\", id: \"id5\", product: \"Marmelade\", status: false },\n  { department: \"Ceralien\", id: \"id3\", product: \"M√ºsli\", status: false },\n  { department: \"Ceralien\", id: \"id4\", product: \"Honig\", status: false },\n  { department: \"Molkereiprodukte\", id: \"id1\", product: \"Milch\", status: false }\n];\n\nlet testArr = arr1.map(obj =&gt; ({...obj, status: 'test'}));\n\nconsole.log(arr1[0]);\nconsole.log(testArr[0]);</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.as-console-wrapper { max-height: 100% !important; top: 0; }</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["62861508",{"id":"62861508","questionId":62861485,"isAccepted":false,"score":-1,"created":1594559366,"edited":1594560167,"body":"<p>in javascript, <code>clonedArray=originalArray</code> just creates a reference == the same array.<br />\nyou can overcome this/&quot;clone&quot; a simple array by:</p>\n<pre><code>clonedArray=originalArray.slice()\n</code></pre>\n<p>or, for complex (say, with objects), the &quot;quickest&quot; way is:</p>\n<pre><code>clonedArray=JSON.parse(JSON.stringify(originalArray))\n</code></pre>\n"}],["62861601",{"id":"62861601","questionId":62861485,"isAccepted":false,"score":1,"created":1594559895,"body":"<p>In your example the object are byRef. This means that they are not deep copied. You can create a new Array by using map and Object.assign:</p>\n<pre><code>const testArr = arr1.map(i =&gt; Object.assign({}, i)); \n</code></pre>\n<p>Then after running:</p>\n<pre><code>testArr.forEach(obj =&gt; (obj.status = &quot;test&quot;));\nconsole.log(arr1, testArr)\n</code></pre>\n<p>You can see that the arr1 objects where not mutated (screenshot from my console):\n<a href=\"https://i.stack.imgur.com/UCc0h.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/UCc0h.png\" alt=\"enter image description here\" /></a></p>\n"}],["62861562",{"id":"62861562","questionId":62861485,"isAccepted":false,"score":-1,"created":1594559676,"body":"<p>Another suggestion is third party package lodash to do a deepcopy (removes references) -                    <a href=\"https://lodash.com/docs/4.17.15#cloneDeep\" rel=\"nofollow noreferrer\">https://lodash.com/docs/4.17.15#cloneDeep</a></p>\n"}],["20547803",{"id":"20547803","questionId":3978492,"isAccepted":true,"score":887,"created":1386862967,"edited":1594521310,"body":"<p>There are at least <strong>6</strong> (!) ways to clone an array:</p>\n<ul>\n<li>loop</li>\n<li>slice</li>\n<li>Array.from()</li>\n<li>concat</li>\n<li>spread operator (FASTEST)</li>\n<li>map <code>A.map(function(e){return e;});</code></li>\n</ul>\n<p>There has been a huuuge <a href=\"http://jsben.ch/lO6C5\" rel=\"noreferrer\">BENCHMARKS thread</a>, providing following information:</p>\n<ul>\n<li><p>for <strong>blink</strong> browsers <code>slice()</code> is the fastest method, <code>concat()</code> is a bit slower, and <code>while loop</code> is 2.4x slower.</p>\n</li>\n<li><p>for other browsers <code>while loop</code> is the fastest method, since those browsers don't have internal optimizations for <code>slice</code> and <code>concat</code>.</p>\n</li>\n</ul>\n<p>This remains true in Jul 2016.</p>\n<p>Below are simple scripts that you can copy-paste into your browser's console and run several times to see the picture. They output milliseconds, lower is better.</p>\n<p><strong>while loop</strong></p>\n<pre><code>n = 1000*1000;\nstart = + new Date();\na = Array(n); \nb = Array(n); \ni = a.length;\nwhile(i--) b[i] = a[i];\nconsole.log(new Date() - start);\n</code></pre>\n<p><strong>slice</strong></p>\n<pre><code>n = 1000*1000;\nstart = + new Date();\na = Array(n); \nb = a.slice();\nconsole.log(new Date() - start);\n</code></pre>\n<p>Please note that these methods will clone the Array object itself, array contents however are copied by reference and are not deep cloned.</p>\n<pre><code>origAr == clonedArr //returns false\norigAr[0] == clonedArr[0] //returns true\n</code></pre>\n"}],["30888281",{"id":"30888281","questionId":30888197,"isAccepted":true,"score":295,"created":1434535169,"edited":1593019431,"body":"<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const format1 = \"YYYY-MM-DD HH:mm:ss\"\nconst format2 = \"YYYY-MM-DD\"\nvar date1 = new Date(\"2020-06-24 22:57:36\");\nvar date2 = new Date();\n\ndateTime1 = moment(date1).format(format1);\ndateTime2 = moment(date2).format(format2);\n\ndocument.getElementById(\"demo1\").innerHTML = dateTime1;\ndocument.getElementById(\"demo2\").innerHTML = dateTime2;</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;p id=\"demo1\"&gt;&lt;/p&gt;\n&lt;p id=\"demo2\"&gt;&lt;/p&gt;\n\n&lt;script src=\"https://momentjs.com/downloads/moment.js\"&gt;&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["979289",{"id":"979289","questionId":979256,"isAccepted":true,"score":2116,"created":1244693555,"edited":1592505933,"body":"<p>Sort homes by price in ascending order:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>homes.sort(function(a, b) {\n    return parseFloat(a.price) - parseFloat(b.price);\n});\n</code></pre>\n\n<p>Or after ES6 version:</p>\n\n<pre><code>homes.sort((a, b) =&gt; parseFloat(a.price) - parseFloat(b.price));\n</code></pre>\n\n<p>Some documentation can be found <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" rel=\"noreferrer\">here</a>.</p>\n\n<p>For descending order, you may use </p>\n\n<pre><code>homes.sort((a, b) =&gt; parseFloat(b.price) - parseFloat(a.price));\n</code></pre>\n"}],["61090531",{"id":"61090531","questionId":61090344,"isAccepted":false,"score":0,"created":1586299121,"body":"<p>To answer my own question, I found this answer: <a href=\"https://stackoverflow.com/a/43373134/11441482\">https://stackoverflow.com/a/43373134/11441482</a></p>\n\n<p>To make all files use absolute paths (e.g src=\"/main.js\") I had to set output.publicPath to '/' in my frontend Webpack configuration. This property is used by html-webpack-plugin. See this question for more details: <a href=\"https://stackoverflow.com/questions/34620628/htmlwebpackplugin-injects-relative-path-files-which-breaks-when-loading-non-root\">HtmlWebpackPlugin injects relative path files which breaks when loading non-root website paths</a>  </p>\n"}],["60879014",{"id":"60879014","questionId":60878869,"isAccepted":false,"score":1,"created":1585275127,"body":"<p>Read the documentation: <a href=\"https://expressjs.com/en/starter/static-files.html\" rel=\"nofollow noreferrer\">https://expressjs.com/en/starter/static-files.html</a></p>\n\n<pre><code>app.use(express.static(path.join(__dirname, 'public')));\n</code></pre>\n\n<p>The above snippet will statically serve all files under <code>public/</code></p>\n"}],["60390063",{"id":"60390063","questionId":42515588,"isAccepted":false,"score":78,"created":1582618168,"body":"<p>Since this pops up in google results, moment now has a <a href=\"https://momentjs.com/docs/#/get-set/set/\" rel=\"noreferrer\"><code>set(unit, value)</code></a> function and you can achieve this by:</p>\n\n<pre><code>const hours = 15;\nconst minutes = 32;\nvar date = moment(\"1946-05-21\").set(\"hour\", hours).set(\"minute\", minutes);\n</code></pre>\n\n<p>or as a combined function</p>\n\n<pre><code>var date = moment(\"1946-05-21\").set({\"hour\": 15, \"minute\": 32});\n</code></pre>\n\n<p><em>Note: the <code>set</code> function requires the value to be Integer type</em> </p>\n"}],["59530867",{"id":"59530867","questionId":42515588,"isAccepted":false,"score":4,"created":1577708903,"edited":1580138702,"body":"<pre><code>var timeAndDate = moment(date).add(moment.duration(time))\n</code></pre>\n\n<p>When you have separated string for date and time you can parse first as date and second as duration and just add them. This should create <code>moment</code> with proper date and time</p>\n"}],["5344074",{"id":"5344074","questionId":122102,"isAccepted":false,"score":2439,"created":1300389595,"edited":1574224292,"body":"<p>Checkout this benchmark: <a href=\"http://jsben.ch/#/bWfk9\" rel=\"noreferrer\">http://jsben.ch/#/bWfk9</a></p>\n\n<p>In my previous tests where speed was a main concern I found </p>\n\n<pre><code>JSON.parse(JSON.stringify(obj))\n</code></pre>\n\n<p>to be the slowest way to deep clone an object (it is slower than <a href=\"https://api.jquery.com/jQuery.extend/\" rel=\"noreferrer\">jQuery.extend</a> with <code>deep</code> flag set true by 10-20%).</p>\n\n<p>jQuery.extend is pretty fast when the <code>deep</code> flag is set to <code>false</code> (shallow clone). It is a good option, because it includes some extra logic for type validation and doesn't copy over undefined properties, etc., but this will also slow you down a little.</p>\n\n<p>If you know the structure of the objects you are trying to clone or can avoid deep nested arrays you can write a simple <code>for (var i in obj)</code> loop to clone your object while checking hasOwnProperty and it will be much much faster than jQuery.</p>\n\n<p>Lastly if you are attempting to clone a known object structure in a hot loop you can get MUCH MUCH MORE PERFORMANCE by simply in-lining the clone procedure and manually constructing the object.</p>\n\n<p>JavaScript trace engines suck at optimizing <code>for..in</code> loops and checking hasOwnProperty will slow you down as well. Manual clone when speed is an absolute must.</p>\n\n<pre><code>var clonedObject = {\n  knownProp: obj.knownProp,\n  ..\n}\n</code></pre>\n\n<p>Beware using the <code>JSON.parse(JSON.stringify(obj))</code> method on <code>Date</code> objects - <code>JSON.stringify(new Date())</code> returns a string representation of the date in ISO format, which <code>JSON.parse()</code> <strong>doesn't</strong> convert back to a <code>Date</code> object. <a href=\"https://stackoverflow.com/questions/11491938/issues-with-date-when-using-json-stringify-and-json-parse/11491993#11491993\">See this answer for more details</a>.</p>\n\n<p>Additionally, please note that, in Chrome 65 at least, native cloning is not the way to go. According to JSPerf, performing native cloning by creating a new function is nearly <strong>800x</strong> slower than using JSON.stringify which is incredibly fast all the way across the board.</p>\n\n<p><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" rel=\"noreferrer\">Update for ES6</a></strong></p>\n\n<p>If you are using Javascript ES6 try this native method for cloning or shallow copy.</p>\n\n<pre><code>Object.assign({}, obj);\n</code></pre>\n"}],["979325",{"id":"979325","questionId":979256,"isAccepted":false,"score":722,"created":1244694839,"edited":1569858408,"body":"<p>Here's a more flexible version, which allows you to create \nreusable sort functions, and sort by any field.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const sort_by = (field, reverse, primer) =&gt; {\r\n\r\n  const key = primer ?\r\n    function(x) {\r\n      return primer(x[field])\r\n    } :\r\n    function(x) {\r\n      return x[field]\r\n    };\r\n\r\n  reverse = !reverse ? 1 : -1;\r\n\r\n  return function(a, b) {\r\n    return a = key(a), b = key(b), reverse * ((a &gt; b) - (b &gt; a));\r\n  }\r\n}\r\n\r\n\r\n//Now you can sort by any field at will...\r\n\r\nconst homes=[{h_id:\"3\",city:\"Dallas\",state:\"TX\",zip:\"75201\",price:\"162500\"},{h_id:\"4\",city:\"Bevery Hills\",state:\"CA\",zip:\"90210\",price:\"319250\"},{h_id:\"5\",city:\"New York\",state:\"NY\",zip:\"00010\",price:\"962500\"}];\r\n\r\n// Sort by price high to low\r\nconsole.log(homes.sort(sort_by('price', true, parseInt)));\r\n\r\n// Sort by city, case-insensitive, A-Z\r\nconsole.log(homes.sort(sort_by('city', false, (a) =&gt;  a.toUpperCase()\r\n)));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["57287372",{"id":"57287372","questionId":24428656,"isAccepted":false,"score":21,"created":1564564816,"body":"<p>There is a simple function <code>subtract</code> which moment library gives us to subtract time from some time.\nUsing it is also very simple.</p>\n\n<pre><code>moment(Date.now()).subtract(7, 'days'); // This will subtract 7 days from current time\nmoment(Date.now()).subtract(3, 'd'); // This will subtract 3 days from current time\n\n//You can do this for days, years, months, hours, minutes, seconds\n//You can also subtract multiple things simulatneously\n\n//You can chain it like this.\nmoment(Date.now()).subtract(3, 'd').subtract(5. 'h'); // This will subtract 3 days and 5 hours from current time\n\n//You can also use it as object literal\nmoment(Date.now()).subtract({days:3, hours:5}); // This will subtract 3 days and 5 hours from current time\n</code></pre>\n\n<p>Hope this helps!</p>\n"}],["57283984",{"id":"57283984","questionId":42515588,"isAccepted":false,"score":6,"created":1564551901,"body":"<p>Just incase anyone is wondering how to set the time on a <em>Date Object</em>, here's how I did it:</p>\n\n<pre><code>const dateObj = new Date();\n\nconst dateStr = dateObj.toISOString().split('T').shift();\nconst timeStr = '03:45';\n\nconst timeAndDate = moment(dateStr + ' ' + timeStr).toDate();\n</code></pre>\n"}],["57222951",{"id":"57222951","questionId":57222470,"isAccepted":false,"score":1,"created":1564154462,"edited":1564389027,"body":"<p>If you absolutely want to enforce the chaining, you can create your own function on the array prototype. (You should understand <a href=\"https://stackoverflow.com/questions/8859828/javascript-what-dangers-are-in-extending-array-prototype\">its implication</a> though.)</p>\n\n<p>I advise against using the same method name, so invent your own names if you want to go down that route.</p>\n\n<p>Here's an example:</p>\n\n<pre><code>Array.prototype.add = function(elem) {\n    this.push(elem)\n    return this\n}\n\nconst myArray = [].add(\"foo\").add(\"bar\")\n\nconsole.log(myArray) // logs: [ 'foo', 'bar' ]\n</code></pre>\n"}],["57222516",{"id":"57222516","questionId":57222470,"isAccepted":true,"score":0,"created":1564152754,"edited":1564152981,"body":"<p><code>array.push</code> returns the new length of the array which you're storing in <code>arr2</code> variable.</p>\n\n<p>You need the following:</p>\n\n<pre><code>var arr1 = [\"foo\", \"bar\"];\nvar arr2 = arr1.concat(\"moo\");\nconsole.log(arr2); \n</code></pre>\n"}],["56812352",{"id":"56812352","questionId":56809727,"isAccepted":false,"score":1,"created":1561750481,"edited":1561751339,"body":"<p>It probably would make sense to have a <code>reusable</code> function you can call to do the sorting for you which also accepts a <code>direction parameter</code>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = [{ title: \"finance\", book: \"book1\" }, { title: \"nature\", book: \"book2\" }, { title: \"programming\", book: \"book3\" }]\r\n\r\nlet sortBy = (arr, p, o=1) =&gt; [...arr].sort((a,b) =&gt; a[p].localeCompare(b[p]) * o)\r\n\r\nconsole.log(sortBy(arr, 'title'))\r\nconsole.log(sortBy(arr, 'title', -1))\r\nconsole.log(sortBy(arr, 'book'))\r\nconsole.log(sortBy(arr, 'book', -1))</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>You can replace the last param to deal with <code>asc/desc</code> if you need to.</p>\n\n<p>Also since you are comparing strings the recommended way is to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\" rel=\"nofollow noreferrer\">String.localeCompare</a> simply due to the amount of options it supports which almost always come in handy (sorting <code>book10</code> vs <code>book1</code> for example)</p>\n"}],["56809881",{"id":"56809881","questionId":56809727,"isAccepted":true,"score":2,"created":1561737189,"body":"<p>You can create a property on <code>self</code> like <code>isAscending</code> and default to true or false (whatever you want initially) based on which sort order will be executed and flip <code>isAscending</code> every time the sort fn runs.</p>\n\n<pre><code>self.isAscending = true;\n\nself.sortTitle = function () {\n if(self.isAscending){ \n   self.arr= self.arr.sort((a, b) =&gt; (a.title &gt; b.title) ? 1 : -1);\n }else{\n   self.arr= self.arr.sort((a, b) =&gt; (a.title &gt; b.title) ? -1 : 1);\n }\n self.isAscending = !self.isAscending;\n}\n</code></pre>\n"}],["42515766",{"id":"42515766","questionId":42515588,"isAccepted":true,"score":126,"created":1488304960,"edited":1556451357,"body":"<p>Moment.js does not provide a way to set the time of an existing moment through a string. Why not just concatenate the two:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var date = \"2017-03-13\";\r\nvar time = \"18:00\";\r\n\r\nvar timeAndDate = moment(date + ' ' + time);\r\n\r\nconsole.log(timeAndDate);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Alternatively, you can use two Moment objects and use the getters and setters. Although a far more verbose option, it could be useful if you can't use concatenation: </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let dateStr = '2017-03-13',\r\n    timeStr = '18:00',\r\n    date    = moment(dateStr),\r\n    time    = moment(timeStr, 'HH:mm');\r\n\r\ndate.set({\r\n    hour:   time.get('hour'),\r\n    minute: time.get('minute'),\r\n    second: time.get('second')\r\n});\r\n\r\nconsole.log(date);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["55854598",{"id":"55854598","questionId":55853857,"isAccepted":true,"score":3,"created":1556212771,"body":"<p>It's got to do with <code>relative</code> path. With <code>express</code> it's <em>safer</em> to use <code>absolute</code> path.</p>\n\n<p>After your route goes one level <em>deep</em>, the html file which is send needs to search one level <em>up</em> to find the static files. (You can confirm: <code>../public/global.css</code> will actually link static files correctly in your route <code>/admin/organizations</code>)</p>\n\n<p>Simple fix: use absolute path (notice it starts only with <code>/</code>)</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" type = \"text/css\" href = \"/public/global.css\"/&gt;\n</code></pre>\n"}],["55289687",{"id":"55289687","questionId":55285668,"isAccepted":false,"score":1,"created":1553204528,"body":"<p>I've solved the problem.</p>\n\n<p>The problem was in the wrong order, express.static() have been calling after routing function.</p>\n\n<p>Here is a correct version:</p>\n\n<pre><code>app.use(express.static(path.join(__dirname, 'views', 'src')));\napp.use(userRoutes);\n</code></pre>\n"}],["55285916",{"id":"55285916","questionId":55285668,"isAccepted":false,"score":2,"created":1553188739,"body":"<p>I would just serve the public folder.</p>\n\n<pre><code>app.use(express.static(path.join(__dirname, 'public')));\n</code></pre>\n\n<p>Then you can just do:</p>\n\n<pre>http://localhost:8080/views/src/index.js</pre>\n"}],["54623139",{"id":"54623139","questionId":54623130,"isAccepted":false,"score":19,"created":1549851347,"edited":1592644375,"body":"<p>You can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" rel=\"noreferrer\">destructuring assignment</a> and the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" rel=\"noreferrer\"><code>.sort</code></a> method like so:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var myarray = []\nmyarray.push({name: \"alex\", age: 8})\nmyarray.push({name: \"ben\", age: 57})\nmyarray.push({name: \"dan\", age: 32});\n\nvar res = myarray.sort(({age:a}, {age:b}) =&gt; b-a);\nconsole.log(res);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Or, if you don't feel comfortable with destructing, you can use regular <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#Dot_notation\" rel=\"noreferrer\">dot notation</a> to access the <code>age</code> property:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var myarray = []\nmyarray.push({name: \"alex\", age: 8})\nmyarray.push({name: \"ben\", age: 57})\nmyarray.push({name: \"dan\", age: 32});\n\nvar res = myarray.sort((a, b) =&gt; b.age-a.age);\nconsole.log(res);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>The way <code>.sort</code> works is defined by what you return from the callback function you pass in. If you return:</p>\n<ul>\n<li><code>&lt;= -1</code> then <code>a</code> will come before <code>b</code>.</li>\n<li><code>0</code> then keep <code>a</code> and <code>b</code> in the same positions</li>\n<li><code>&gt;= 1</code> then <code>b</code> will come before <code>a</code></li>\n</ul>\n<p>Thus, by calculating the difference between the two ages, this &quot;naturally&quot; gives the correct values to properly sort your array.</p>\n"}],["54135336",{"id":"54135336","questionId":33440646,"isAccepted":false,"score":60,"created":1547147053,"body":"<blockquote>\n  <p>According to the latest <a href=\"https://momentjs.com/\" rel=\"noreferrer\">doc</a> you can do the following-</p>\n</blockquote>\n\n<p><strong>Add a day</strong></p>\n\n<pre><code>moment().add(1, 'days').calendar();\n</code></pre>\n\n<p><strong>Add Year</strong></p>\n\n<pre><code>moment().add(1, 'years').calendar();\n</code></pre>\n\n<p><strong>Add Month</strong></p>\n\n<pre><code>moment().add(1, 'months').calendar();\n</code></pre>\n"}],["15276975",{"id":"15276975","questionId":6116474,"isAccepted":true,"score":1137,"created":1362675025,"edited":1543232147,"body":"<p>You really don't need jQuery for this.</p>\n\n<pre><code>var myarr = [\"I\", \"like\", \"turtles\"];\nvar arraycontainsturtles = (myarr.indexOf(\"turtles\") &gt; -1);\n</code></pre>\n\n<blockquote>\n  <p><strong>Hint</strong>: indexOf returns a number, representing the position where the specified searchvalue occurs for the first time, or -1 if it never\n  occurs</p>\n</blockquote>\n\n<p>or</p>\n\n<pre><code>function arrayContains(needle, arrhaystack)\n{\n    return (arrhaystack.indexOf(needle) &gt; -1);\n}\n</code></pre>\n\n<p>It's worth noting that <code>array.indexOf(..)</code> is <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Browser_compatibility\" rel=\"noreferrer\">not supported in IE &lt; 9</a>, but jQuery's <code>indexOf(...)</code> function will work even for those older versions.  </p>\n"}],["31251089",{"id":"31251089","questionId":3978492,"isAccepted":false,"score":182,"created":1436200448,"edited":1540159509,"body":"<p>what about es6 way?</p>\n\n<pre><code>arr2 = [...arr1];\n</code></pre>\n"}],["26638278",{"id":"26638278","questionId":26349497,"isAccepted":false,"score":11,"created":1414608320,"edited":1539735880,"body":"<p>This pattern will serve static assets before hitting the catch-all route that serves up your front-end application. To register any additional routes, just add them above the catch-all route.</p>\n\n<pre><code>var express = require('express');\nvar server = express();\n\n// middleware\nserver.use(express.static(__dirname + '/public'));\n\n// routes\nserver.use('*', function (req, res) {\n  // serve file\n});\n\nvar port = 10001;\nserver.listen(port, function() {\n  console.log('server listening on port ' + port);\n});\n</code></pre>\n"}],["52460509",{"id":"52460509","questionId":52460473,"isAccepted":false,"score":13,"created":1537647195,"edited":1537648694,"body":"<p>There are many ways to implement that, for example, here are four ES6 methods for that:</p>\n\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\" rel=\"noreferrer\"><code>some()</code></a> will return <code>true</code> or <code>false</code>, depending on the condition. It tests, does at list one element fits the condition</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\" rel=\"noreferrer\"><code>find()</code></a> will return an item itself (the first matched item), if the condition evaluates to <code>true</code>, and <code>undefined</code> if it evaluates to <code>false</code>.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\" rel=\"noreferrer\"><code>findIndex()</code></a> will return an index of the item (the first matched index), if the condition evaluates to <code>true</code>, and <code>-1</code> if it evaluates to <code>false</code></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" rel=\"noreferrer\"><code>filter()</code></a> will create a new array with all items, which fit the condition (otherwise it returnes an empty array)</li>\n</ol>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const users = [\r\n   {\r\n     \"type\": \"User\",\r\n     \"userId\": \"5b774905c2b2ac0f33ac4cc7\",\r\n     \"name\": \"Mike\"\r\n   },\r\n   {\r\n     \"type\": \"User\",\r\n     \"userId\": \"5b77490f3084460f2986bd25\",\r\n     \"name\": \"Pater\"\r\n   }\r\n];\r\n\r\nconst someObject = users.some(item =&gt; item.name === 'Mike');\r\nconst targetObject = users.find(item =&gt; item.name === 'Mike');\r\nconst targetIndex = users.findIndex(item =&gt; item.name === 'Mike');\r\nconst filteredObjects = users.filter(item =&gt; item.name === 'Mike');\r\n\r\nconsole.log('someObject:', someObject)\r\nconsole.log('targetObject:', targetObject)\r\nconsole.log('targetIndex:', targetIndex)\r\nconsole.log('filteredObjects:', filteredObjects)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["52453070",{"id":"52453070","questionId":4022171,"isAccepted":false,"score":21,"created":1537584383,"body":"<p>You can using code :</p>\n\n<pre><code>function formatMoney(number) {\n  return number.toLocaleString('en-US', { style: 'currency', currency: 'USD' });\n}\n\nconsole.log(formatMoney(10000));   // $10,000.00\nconsole.log(formatMoney(1000000)); // $1,000,000.00\n</code></pre>\n\n<p>It was answered at <a href=\"https://stackoverflow.com/questions/40426965/javascript-function-to-format-as-money\">Javascript Function to Format as Money</a></p>\n\n<p>Or you can custom :</p>\n\n<pre><code>function formatMoney(number) {\n   return '$ '+ number.toLocaleString('en-US');\n}\n</code></pre>\n"}],["26638143",{"id":"26638143","questionId":26349497,"isAccepted":false,"score":58,"created":1414607856,"edited":1534430252,"body":"<pre><code>const express = require('express')\nconst server = express()\n\n/* route requests for static files to appropriate directory */\nserver.use('/public', express.static(__dirname + '/static-files-dir'))\n\n/* other routes defined before catch-all */\nserver.get('/some-route', (req, res) =&gt; {\n  res.send('ok')\n})\n\n/* final catch-all route to index.html defined last */\nserver.get('/*', (req, res) =&gt; {\n  res.sendFile(__dirname + '/index.html');\n})\n\nconst port = 8000;\nserver.listen(port, function() {\n  console.log('server listening on port ' + port)\n})\n</code></pre>\n"}],["50008600",{"id":"50008600","questionId":50008552,"isAccepted":false,"score":0,"created":1524594626,"body":"<p>You can use path.join()</p>\n\n<pre><code>app.use(express.static(path.join(__dirname,'public')));\n</code></pre>\n"}],["33440963",{"id":"33440963","questionId":33440646,"isAccepted":true,"score":122,"created":1446223541,"edited":1519212741,"body":"<pre><code>var currentDate = moment('2015-10-30');\nvar futureMonth = moment(currentDate).add(1, 'M');\nvar futureMonthEnd = moment(futureMonth).endOf('month');\n\nif(currentDate.date() != futureMonth.date() &amp;&amp; futureMonth.isSame(futureMonthEnd.format('YYYY-MM-DD'))) {\n    futureMonth = futureMonth.add(1, 'd');\n}\n\nconsole.log(currentDate);\nconsole.log(futureMonth);\n</code></pre>\n\n<p><kbd><a href=\"http://jsbin.com/butuduhoti/edit?js,console\" rel=\"noreferrer\"><strong>DEMO</strong></a></kbd></p>\n\n<p><strong>EDIT</strong></p>\n\n<pre><code>moment.addRealMonth = function addRealMonth(d) {\n  var fm = moment(d).add(1, 'M');\n  var fmEnd = moment(fm).endOf('month');\n  return d.date() != fm.date() &amp;&amp; fm.isSame(fmEnd.format('YYYY-MM-DD')) ? fm.add(1, 'd') : fm;  \n}\n\nvar nextMonth = moment.addRealMonth(moment());\n</code></pre>\n\n<p><kbd><a href=\"https://jsbin.com/deduyoroso/edit?js,console\" rel=\"noreferrer\"><strong>DEMO</strong></a></kbd></p>\n"}],["47790805",{"id":"47790805","questionId":12462318,"isAccepted":false,"score":66,"created":1513161031,"body":"<pre><code>var array = [\n    { name:\"string 1\", value:\"this\", other: \"that\" },\n    { name:\"string 2\", value:\"this\", other: \"that\" }\n];\n\nvar foundValue = array.filter(obj=&gt;obj.name==='string 1');\n\nconsole.log(foundValue);\n</code></pre>\n"}],["45949262",{"id":"45949262","questionId":45941301,"isAccepted":false,"score":0,"created":1504046138,"body":"<p>I assume that your <code>x</code> property is a JavaScript Date object and with <code>var date = moment(value.x);</code> you are calling <a href=\"http://momentjs.com/docs/#/parsing/date/\" rel=\"nofollow noreferrer\"><code>moment(Date);</code></a>.</p>\n\n<p>You can use <a href=\"http://momentjs.com/docs/#/query/is-between/\" rel=\"nofollow noreferrer\"><code>isBetween</code></a> that:</p>\n\n<blockquote>\n  <p>Check if a moment is between two other moments, optionally looking at unit scale (minutes, hours, days, etc). The match is exclusive.</p>\n</blockquote>\n\n<p>In your case, you can pass <code>'[]'</code> as forth parameter to make <a href=\"http://momentjs.com/docs/#/query/is-between/\" rel=\"nofollow noreferrer\"><code>isBetween</code></a> inclusive.</p>\n\n<p>You can simply use <code>date.isBetween(start, end, null, '[]')</code> to check if an element is in the range between <code>start</code> and <code>end</code>.</p>\n\n<p>Then you can use <code>isBetween</code> to check if your element time is between <code>08:05:00</code> and <code>22:05:00</code> building 3 moment object for the same day (today in my example, since <em>Omitted units default to 0 or the current date, month, and year.</em> as stated in the docs of <a href=\"http://momentjs.com/docs/#/parsing/object/\" rel=\"nofollow noreferrer\"><code>moment({unit: value, ...});</code></a>). So you will have:</p>\n\n<ul>\n<li><code>today805</code> that represent the current day at <code>08:05:00</code></li>\n<li><code>today2205</code> that represent the current day at <code>22:05:00</code></li>\n<li><code>time</code> that is a moment object for the current day with the time of the <code>x</code> property (of the current element of the <code>$.each</code> loop)</li>\n</ul>\n\n<p>So you can use <code>time.isBetween(today805, today2205, null, '[]')</code> to check if the element's time is between <code>08:05:00</code> and <code>22:05:00</code>. This will compare <em>\"only\"</em> time because the three moments represents the same day <em>by construction</em>.</p>\n\n<p>You can get hours and minutes of the <code>x</code> properties of the <code>array</code> elements using both moment's getters (<a href=\"http://momentjs.com/docs/#/get-set/hour/\" rel=\"nofollow noreferrer\"><code>hours()</code></a> and <a href=\"http://momentjs.com/docs/#/get-set/minute/\" rel=\"nofollow noreferrer\"><code>minutes()</code></a>) and native Date getters (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours\" rel=\"nofollow noreferrer\"><code>getHours()</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes\" rel=\"nofollow noreferrer\"><code>getMinutes()</code></a>)</p>\n\n<p>Here a working sample: </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var start = moment('2017-08-21').startOf('isoweek').startOf('day');\r\nvar end = moment('2017-08-21').startOf('isoweek').add(4, 'days').endOf('day');\r\n\r\nvar array = [\r\n   {x: new Date(2017, 7, 21, 8, 0), y:3},\r\n   {x: new Date(2017, 7, 21, 8, 5), y:6},\r\n   //...\r\n   {x: new Date(2017, 7, 22, 7, 5), y:4},\r\n   {x: new Date(2017, 7, 22, 8, 5), y:3},\r\n   {x: new Date(2017, 7, 22, 15, 5),y:9},\r\n   {x: new Date(2017, 7, 22, 22, 5),y:1},\r\n   //...\r\n   //...\r\n   //...\r\n   {x: new Date(2017, 7, 27, 6, 5), y:5},\r\n   {x: new Date(2017, 7, 27, 8, 0), y:3},\r\n   {x: new Date(2017, 7, 27, 23, 5),y:3},\r\n   //...\r\n];\r\n\r\nvar filterArray = [];\r\n// Today at 08:05:00\r\nvar today805  = moment({h: 8, m: 5});\r\n// Today at 22:05:00\r\nvar today2205 = moment({h: 22, m: 5});\r\n\r\n$.each(array, function (key, value) {\r\n  var date = moment(value.x);\r\n  // Create a moment object for the current day with hours and minutes of value.x\r\n  var time = moment({h: date.hours(), m: date.minutes()});\r\n  var yVal;\r\n  if( date.isBetween(start, end, null, '[]') &amp;&amp; \r\n      time.isBetween(today805, today2205, null, '[]') ) {\r\n    yVal = 0;\r\n  } else {\r\n    yVal = value.y;\r\n  }\r\n  filterArray.push({\r\n    x: date.format(),\r\n    y: yVal\r\n  });\r\n});\r\n\r\nconsole.log(filterArray);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["12462414",{"id":"12462414","questionId":12462318,"isAccepted":false,"score":1284,"created":1347895488,"edited":1503197054,"body":"<h3>Finding the array element:</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let arr = [\r\n    { name:\"string 1\", value:\"this\", other: \"that\" },\r\n    { name:\"string 2\", value:\"this\", other: \"that\" }\r\n];\r\n\r\nlet obj = arr.find(o =&gt; o.name === 'string 1');\r\n\r\nconsole.log(obj);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<h3>Replacing the array element:</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let arr = [\r\n    { name:\"string 1\", value:\"this\", other: \"that\" },\r\n    { name:\"string 2\", value:\"this\", other: \"that\" }\r\n];\r\n\r\nlet obj = arr.find((o, i) =&gt; {\r\n    if (o.name === 'string 1') {\r\n        arr[i] = { name: 'new string', value: 'this', other: 'that' };\r\n        return true; // stop searching\r\n    }\r\n});\r\n\r\nconsole.log(arr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["40460820",{"id":"40460820","questionId":40459932,"isAccepted":true,"score":132,"created":1478507636,"edited":1501666286,"body":"<p>You are correct, you can use moment's <code>diff</code> function to subtract two dates (<a href=\"http://plnkr.co/edit/OYKfMnRjKsfhXd22m5uO\" rel=\"noreferrer\">see my example on Plunker</a>):</p>\n\n<pre><code>var date1 = moment('2016-10-08 10:29:23');\nvar date2 = moment('2016-10-08 11:06:55');\nvar diff = date2.diff(date1);\n</code></pre>\n\n<p>Diff will be equal to <code>2252000</code>, the number of milliseconds between the two date. <a href=\"http://momentjs.com/docs/#/displaying/difference/\" rel=\"noreferrer\">See documentation for more details</a>.</p>\n\n<p>You can pass a second argument to <code>diff</code> with the measurement to use (years, months, weeks, days, hours, minutes, and seconds), so if you want to know the number of minutes between the two dates you can write:</p>\n\n<pre><code>var diffInMinutes = date2.diff(date1, 'minutes');\n</code></pre>\n\n<p>And you get <code>37</code> minutes.</p>\n"}],["44676793",{"id":"44676793","questionId":44662242,"isAccepted":true,"score":13,"created":1498049754,"body":"<p>The standard for this is a <strong>Duration</strong>, defined by <a href=\"https://en.wikipedia.org/wiki/ISO_8601#Durations\" rel=\"noreferrer\">ISO 8601</a>.\nNote that an <strong>Interval</strong> is a different concept (also defined by the same ISO), although both are closely related:</p>\n\n<ul>\n<li>A <strong>Duration</strong> defines an <strong>amount</strong> of time (like \"1 hour and 10 minutes\" or \"2 years, 3 months and 4 days\"). But it doesn't tell you when it starts or ends (\"1 hours and 10 minutes\" relative to what?). It's just the amount of time, by itself.</li>\n<li>An <strong>Interval</strong> (quoting wikipedia) is <em>\"the intervening time between two time points\"</em>. It has a defined start and end dates, but you can use a <strong>Duration</strong> to define it, as it can have 4 different formats:\n\n<ol>\n<li>Start and end, such as <code>2007-03-01T13:00:00Z/2008-05-11T15:30:00Z</code></li>\n<li>Start and duration, such as <code>2007-03-01T13:00:00Z/P1Y2M10DT2H30M</code></li>\n<li>Duration and end, such as <code>P1Y2M10DT2H30M/2008-05-11T15:30:00Z</code></li>\n<li>Duration only, such as <code>P1Y2M10DT2H30M</code>, <strong>with additional context information</strong></li>\n</ol></li>\n</ul>\n\n<p>Cases 1, 2 and 3 are equivalent (all have the same start and end dates). The only difference is that in cases 2 and 3, the duration <code>P1Y2M10DT2H30M</code> is used to calculate the other date (in case 2, you add it to the start date, and in case 3 you subtract it from the end date).</p>\n\n<hr>\n\n\n\n<p>As you can notice above, the standard format for a <strong>Duration</strong> is <code>P[n]Y[n]M[n]DT[n]H[n]M[n]S</code>, where:</p>\n\n<ul>\n<li>P is the duration designator (for period) placed at the start of the duration representation.</li>\n<li>Y is the year designator that follows the value for the number of years.</li>\n<li>M is the month designator that follows the value for the number of months.</li>\n<li>W is the week designator that follows the value for the number of weeks.</li>\n<li>D is the day designator that follows the value for the number of days.</li>\n<li>T is the time designator that precedes the time components of the representation.</li>\n<li>H is the hour designator that follows the value for the number of hours.</li>\n<li>M is the minute designator that follows the value for the number of minutes.</li>\n<li>S is the second designator that follows the value for the number of seconds.</li>\n</ul>\n\n<p>So, \"1 year and 10 months\" is represented as <code>P1Y10M</code> and \"1 hour and 10 minutes\" is <code>PT1H10M</code> (note that the <code>T</code> is required to resolve the potencial ambiguity between 1 month (<code>P1M</code>) and 1 minute (<code>PT1M</code>), as they use the same letter <code>M</code> as designator).</p>\n\n<hr>\n\n<p>As @MattJohnson commented, the math with dates it's not always obvious, so the equivalence between different durations can't be what we normally expect.</p>\n\n<p>For the examples below, I'm using Java 8 (just to show how durations can be tricky). Note that the <code>java.time</code> API uses 2 different classes (<code>Period</code> and <code>Duration</code>), but the idea for both is the same (they're both amounts of time).</p>\n\n<ul>\n<li><p>A duration of 1 month is equivalent to how many days? It depends:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>// one month period\nPeriod oneMonth = Period.parse(\"P1M\");\n// January 1st\nLocalDate jan = LocalDate.of(2016, 1, 1);\nSystem.out.println(jan); // 2016-01-01\n// January 1st plus 1 month period = February 1st\nLocalDate feb = jan.plus(oneMonth);\nSystem.out.println(feb); // 2016-02-01\n// February 1st plus 1 month period = March 1st\nLocalDate mar = feb.plus(oneMonth);\nSystem.out.println(mar); // 2016-03-01\n\n// difference between Jan 1st and Feb 1st = 31 days\nSystem.out.println(ChronoUnit.DAYS.between(jan, feb)); // 31\n// difference between Feb 1st and Mar 1st = 29 days (2016 is leap year)\nSystem.out.println(ChronoUnit.DAYS.between(feb, mar)); // 29\n</code></pre></li>\n</ul>\n\n<p>So, adding 1 month to <em>January 1<sup>st</sup></em> results in <em>February 1<sup>st</sup></em> - in this case, 1 month is equivalent 31 days (A.K.A. <strong>adding a 1 month duration (<code>P1M</code>) is equivalent to adding a 31 days duration (<code>P31D</code>)</strong>), and adding 1 month to <em>February 1<sup>st</sup></em> results in <em>March 1<sup>st</sup></em> (in this case, 1 month = 29 days, because 2016 is a leap year).</p>\n\n<ul>\n<li><p>1 day = 24 hours? Not always. If there's a <a href=\"https://en.wikipedia.org/wiki/Daylight_saving_time\" rel=\"noreferrer\">Daylight Saving Time</a> shift involved, you can get strange results:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>// 1 day period\nPeriod oneDay = Period.parse(\"P1D\");\n// 24 hours period\nDuration twentyFourHours = Duration.parse(\"PT24H\");\n// in Sao Paulo, summer time starts at Oct 15, at midnight\n// getting a date one day before DST change, at 10:00 AM\nZonedDateTime z = ZonedDateTime.of(2017, 10, 14, 10, 0, 0, 0, ZoneId.of(\"America/Sao_Paulo\"));\nSystem.out.println(z); // 2017-10-14T10:00-03:00[America/Sao_Paulo]\n\n// add 1 day - gets the same hour (10:00 AM)\nSystem.out.println(z.plus(oneDay)); // 2017-10-15T10:00-02:00[America/Sao_Paulo]\n\n// add 24 hours - gets 11:00 AM because of DST shift (at midnight, clocks moved forward 1 hour)\nSystem.out.println(z.plus(twentyFourHours)); // 2017-10-15T11:00-02:00[America/Sao_Paulo]\n</code></pre></li>\n</ul>\n\n<p>In S√£o Paulo, at <em>October 15<sup>th</sup>, 2017</em>, DST starts (clocks are moved forward by 1 hour), so:</p>\n\n<ul>\n<li>If you add <strong>24 hours</strong> to <em>October 14<sup>th</sup> at 10 AM</em>, you'll get <em>October 15<sup>th</sup> at <strong>11</strong> AM</em></li>\n<li>But if you add <strong>1 day</strong>, you'll get <em>October 15<sup>th</sup> at <strong>10</strong> AM</em></li>\n</ul>\n\n<p>So, in this case, 1 day = 23 hours - <strong>it means that adding a 1 day duration (<code>P1D</code>) is equivalent to adding a 23 hours duration (<code>PT23H</code>)</strong></p>\n\n<p>When DST ends, is the opposite: clocks move back 1 hour, and 1 day will be equivalent to 25 hours.</p>\n\n<p>So, the standard defines the format and meaning of the amounts of time concepts, but the equivalence between different durations will depend on the context (although it might sound non-intuitive that 1 day is not always 24 hours, but date/time math is not as obvious as we'd like).</p>\n"}],["44662365",{"id":"44662365","questionId":44662242,"isAccepted":false,"score":1,"created":1497990232,"edited":1497990736,"body":"<p>You can use moment: <a href=\"http://momentjs.com/docs/#/durations/\" rel=\"nofollow noreferrer\">http://momentjs.com/docs/#/durations/</a></p>\n\n<pre><code>moment.duration(100); // 100 milliseconds\nmoment.duration(60000).humanize(); // a minute\n</code></pre>\n\n<p>Read more in the above linked docs. And to get all unit values you may want to use the ISO8601 Format:</p>\n\n<pre><code>moment.duration(1, 'd').toISOString() // \"P1D\"\n</code></pre>\n\n<p>For example, \"P3Y6M4DT12H30M5S\" represents a duration of \"three years, six months, four days, twelve hours, thirty minutes, and five seconds\".\nRead more directly under <a href=\"http://momentjs.com/docs/#/durations/as-iso-string/\" rel=\"nofollow noreferrer\">http://momentjs.com/docs/#/durations/as-iso-string/</a></p>\n"}],["6116524",{"id":"6116524","questionId":6116474,"isAccepted":false,"score":17,"created":1306269306,"edited":1495329765,"body":"<p>You can use a <code>for</code> loop:</p>\n\n<pre><code>var found = false;\nfor (var i = 0; i &lt; categories.length &amp;&amp; !found; i++) {\n  if (categories[i] === \"specialword\") {\n    found = true;\n    break;\n  }\n}\n</code></pre>\n"}],["44048398",{"id":"44048398","questionId":12462318,"isAccepted":false,"score":81,"created":1495112163,"edited":1495112240,"body":"<p>As per ECMAScript 6, you can use  the <code>findIndex</code> function.</p>\n\n<pre><code>array[array.findIndex(x =&gt; x.name == 'string 1')]\n</code></pre>\n"}],["42977199",{"id":"42977199","questionId":42977068,"isAccepted":true,"score":2,"created":1490275034,"body":"<p>You want the routes to come before serving your static content and you do not need the <code>:path</code> url param</p>\n\n<pre><code>app.get('/xyz/api/user', authApi.user);\napp.use('/xyz/',Express.static(path.join(__dirname,'/app')));\n</code></pre>\n"}],["6116511",{"id":"6116511","questionId":6116474,"isAccepted":false,"score":681,"created":1306269253,"edited":1485879926,"body":"<p>jQuery offers <a href=\"http://api.jquery.com/jQuery.inArray\" rel=\"noreferrer\"><code>$.inArray</code></a>:</p>\n\n<p>Note that inArray returns the index of the element found, so <code>0</code> indicates the element is the first in the array. <code>-1</code> indicates the element was not found.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var categoriesPresent = ['word', 'word', 'specialword', 'word'];\r\nvar categoriesNotPresent = ['word', 'word', 'word'];\r\n\r\nvar foundPresent = $.inArray('specialword', categoriesPresent) &gt; -1;\r\nvar foundNotPresent = $.inArray('specialword', categoriesNotPresent) &gt; -1;\r\n\r\nconsole.log(foundPresent, foundNotPresent); // true false</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<p><em>Edit 3.5 years later</em></p>\n\n<p><code>$.inArray</code> is effectively a wrapper for <code>Array.prototype.indexOf</code> in browsers that support it (almost all of them these days), while providing a shim in those that don't. It is essentially equivalent to adding a shim to <code>Array.prototype</code>, which is a more idiomatic/JSish way of doing things. MDN provides <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Polyfill\" rel=\"noreferrer\">such code</a>. These days I would take this option, rather than using the jQuery wrapper.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var categoriesPresent = ['word', 'word', 'specialword', 'word'];\r\nvar categoriesNotPresent = ['word', 'word', 'word'];\r\n\r\nvar foundPresent = categoriesPresent.indexOf('specialword') &gt; -1;\r\nvar foundNotPresent = categoriesNotPresent.indexOf('specialword') &gt; -1;\r\n\r\nconsole.log(foundPresent, foundNotPresent); // true false</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<p><em>Edit another 3 years later</em></p>\n\n<p><sub>Gosh, 6.5 years?!</sub></p>\n\n<p>The best option for this in modern Javascript is <code>Array.prototype.includes</code>:</p>\n\n<pre><code>var found = categories.includes('specialword');\n</code></pre>\n\n<p>No comparisons and no confusing <code>-1</code> results. It does what we want: it returns <code>true</code> or <code>false</code>. For older browsers it's polyfillable <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Polyfill\" rel=\"noreferrer\">using the code at MDN</a>.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var categoriesPresent = ['word', 'word', 'specialword', 'word'];\r\nvar categoriesNotPresent = ['word', 'word', 'word'];\r\n\r\nvar foundPresent = categoriesPresent.includes('specialword');\r\nvar foundNotPresent = categoriesNotPresent.includes('specialword');\r\n\r\nconsole.log(foundPresent, foundNotPresent); // true false</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["41505553",{"id":"41505553","questionId":41505492,"isAccepted":true,"score":209,"created":1483705003,"edited":1483705569,"body":"<p>For substracting in moment.js:</p>\n\n<pre><code>moment().subtract(1, 'months').format('MMM YYYY');\n</code></pre>\n\n<p><strong>Documentation:</strong></p>\n\n<p><a href=\"http://momentjs.com/docs/#/manipulating/subtract/\" rel=\"noreferrer\">http://momentjs.com/docs/#/manipulating/subtract/</a></p>\n\n<blockquote>\n  <p>Before version 2.8.0, the moment#subtract(String, Number) syntax was\n  also supported. It has been deprecated in favor of\n  moment#subtract(Number, String).</p>\n</blockquote>\n\n<pre><code>  moment().subtract('seconds', 1); // Deprecated in 2.8.0\n  moment().subtract(1, 'seconds');\n</code></pre>\n\n<blockquote>\n  <p>As of 2.12.0 when decimal values are passed for days and months, they\n  are rounded to the nearest integer. Weeks, quarters, and years are\n  converted to days or months, and then rounded to the nearest integer.</p>\n</blockquote>\n\n<pre><code>  moment().subtract(1.5, 'months') == moment().subtract(2, 'months')\n  moment().subtract(.7, 'years') == moment().subtract(8, 'months') //.7*12 = 8.4, rounded to 8\n</code></pre>\n"}],["29495647",{"id":"29495647","questionId":14897571,"isAccepted":false,"score":347,"created":1428421500,"edited":1476494143,"body":"<p>In <strong>versions 2.9+</strong> there is an <code>isBetween</code> function, but it's exclusive:</p>\n\n<pre><code>var compareDate = moment(\"15/02/2013\", \"DD/MM/YYYY\");\nvar startDate   = moment(\"12/01/2013\", \"DD/MM/YYYY\");\nvar endDate     = moment(\"15/01/2013\", \"DD/MM/YYYY\");\n\n// omitting the optional third parameter, 'units'\ncompareDate.isBetween(startDate, endDate); //false in this case\n</code></pre>\n\n<p>There is an inclusive workaround ...<br>\n<code>x.isBetween(a, b) || x.isSame(a) || x.isSame(b)</code></p>\n\n<p>... which is logically equivalent to<br>\n<code>!(x.isBefore(a) || x.isAfter(b))</code></p>\n\n<p><br>\nIn <strong>version 2.13</strong> the <code>isBetween</code> function has a fourth optional parameter, <code>inclusivity</code>. </p>\n\n<p>Use it like this:</p>\n\n<pre><code>target.isBetween(start, finish, 'days', '()') // default exclusive\ntarget.isBetween(start, finish, 'days', '(]') // right inclusive\ntarget.isBetween(start, finish, 'days', '[)') // left inclusive\ntarget.isBetween(start, finish, 'days', '[]') // all inclusive\n</code></pre>\n\n<p>More units to consider: <code>years, months, days, hours, minutes, seconds, milliseconds</code></p>\n\n<p>Note: units are still optional. Use <code>null</code> as the third argument to disregard units in which case milliseconds is the default granularity.</p>\n\n<p><a href=\"http://momentjs.com/docs/#/query/is-between/\" rel=\"noreferrer\">Visit the Official Docs</a></p>\n"}],["29652195",{"id":"29652195","questionId":29651815,"isAccepted":true,"score":297,"created":1429106067,"edited":1471889879,"body":"<p>You have multiple oddities happening. The first has been edited in your post, but it had to do with the order that the methods were being called.</p>\n\n<p><code>.format</code> returns a string. String does not have a <code>subtract</code> method.</p>\n\n<p>The second issue is that you are subtracting the day, but not actually saving that as a variable.</p>\n\n<p>Your code, then, should look like:</p>\n\n<pre><code>var startdate = moment();\nstartdate = startdate.subtract(1, \"days\");\nstartdate = startdate.format(\"DD-MM-YYYY\");\n</code></pre>\n\n<p>However, you can chain this together; this would look like:</p>\n\n<pre><code>var startdate = moment().subtract(1, \"days\").format(\"DD-MM-YYYY\");\n</code></pre>\n\n<p>The difference is that we're setting startdate to the changes that you're doing on startdate, because moment is destructive.</p>\n"}],["38500417",{"id":"38500417","questionId":12462318,"isAccepted":false,"score":212,"created":1469093677,"body":"<p>In <strong>ES6</strong> you can use <code>Array.prototype.find(predicate, thisArg?)</code> like so:</p>\n\n<pre><code>array.find(x =&gt; x.name === 'string 1')\n</code></pre>\n\n<p><a href=\"http://exploringjs.com/es6/ch_arrays.html#_searching-for-array-elements\">http://exploringjs.com/es6/ch_arrays.html#_searching-for-array-elements</a>\n<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/find\">https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/find</a></p>\n\n<p>To then replace said object (and use another cool <strong>ES6</strong> method <code>fill</code>) you could do something like:</p>\n\n<pre><code>let obj = array.find(x =&gt; x.name === 'string 1');\nlet index = array.indexOf(obj);\narray.fill(obj.name='some new string', index, index++);\n</code></pre>\n"}],["36403370",{"id":"36403370","questionId":36395563,"isAccepted":true,"score":0,"created":1459774691,"body":"<p>The solution was to use custom middleware. Here are the new routes:</p>\n\n<pre><code>var requestParser = function(req, res, next) {\n    if(req.originalUrl.indexOf('/assets/') &gt;= 0) {\n        var assetPath = path.join(wwwPath,  req.path.slice(req.url.indexOf('/assets/')));\n        fs.stat(assetPath, function(error, stat){\n            if(stat &amp;&amp; stat.isFile()) {\n                res.sendFile(assetPath);\n            }\n            else{ \n                res.status(404).send('&lt;h1&gt;404&lt;/h1&gt;');\n            }\n        });\n    }\n    else {\n        next();\n    }\n};\n\napp.use(requestParser);\n\napp.use('/list/*', function(req, res, next) {\n    res.sendFile('schema.html', { root: wwwPath });\n});\n\napp.use('/setup/*', function(req, res, next) {\n    res.sendFile('setup.html', { root: wwwPath });\n});\n</code></pre>\n"}],["1296374",{"id":"1296374","questionId":1296358,"isAccepted":true,"score":1321,"created":1250628066,"edited":1458286610,"body":"<p>Try something like this:</p>\n\n<pre><code> var d = new Date();\n d.setDate(d.getDate()-5);\n</code></pre>\n\n<p>Note that this modifies the date object and returns the time value of the updated date.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var d = new Date();\r\n\r\ndocument.write('Today is: ' + d.toLocaleString());\r\n\r\nd.setDate(d.getDate() - 5);\r\n\r\ndocument.write('&lt;br&gt;5 days ago was: ' + d.toLocaleString());</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["34325733",{"id":"34325733","questionId":26145451,"isAccepted":false,"score":32,"created":1450320031,"edited":1453581359,"body":"<p>The easiest solution I found on serving local static files is to use <a href=\"https://github.com/indexzero/http-server\" rel=\"noreferrer\">Http-Server</a>.</p>\n\n<p>Its usage is dead simple. After installing it globally </p>\n\n<pre><code> npm install http-server -g\n</code></pre>\n\n<p>Go to the root directory you want to serve</p>\n\n<pre><code>cd &lt;dir&gt;\nhttp-server\n</code></pre>\n\n<p>That's it!</p>\n"}],["4022212",{"id":"4022212","questionId":4022171,"isAccepted":true,"score":2,"created":1288084534,"edited":1495540342,"body":"<p>You've got to do this by hand, there is nothing builtin into JS. For an example look at this post here: <a href=\"https://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-money-in-javascript\">How can I format numbers as money in JavaScript?</a></p>\n"}],["20089634",{"id":"20089634","questionId":20089582,"isAccepted":true,"score":964,"created":1384931519,"edited":1437077501,"body":"<p><strong>Express 4.x</strong></p>\n\n<p>To get a URL parameter's value, use <a href=\"http://expressjs.com/api.html#req.params\">req.params</a></p>\n\n<pre><code>app.get('/p/:tagId', function(req, res) {\n  res.send(\"tagId is set to \" + req.params.tagId);\n});\n\n// GET /p/5\n// tagId is set to 5\n</code></pre>\n\n<p>If you want to get a query parameter <code>?tagId=5</code>, then use <a href=\"http://expressjs.com/api.html#req.query\">req.query</a></p>\n\n<pre><code>app.get('/p', function(req, res) {\n  res.send(\"tagId is set to \" + req.query.tagId);\n});\n\n// GET /p?tagId=5\n// tagId is set to 5\n</code></pre>\n\n<hr>\n\n<p><strong>Express 3.x</strong></p>\n\n<p>URL parameter</p>\n\n<pre><code>app.get('/p/:tagId', function(req, res) {\n  res.send(\"tagId is set to \" + req.param(\"tagId\"));\n});\n\n// GET /p/5\n// tagId is set to 5\n</code></pre>\n\n<p>Query parameter</p>\n\n<pre><code>app.get('/p', function(req, res) {\n  res.send(\"tagId is set to \" + req.query(\"tagId\"));\n});\n\n// GET /p?tagId=5\n// tagId is set to 5\n</code></pre>\n"}],["28918951",{"id":"28918951","questionId":28918845,"isAccepted":false,"score":9,"created":1425756129,"body":"<blockquote>\n  <p>Sometimes I see people use express.static for static files, what exactly is implied by static files here?</p>\n</blockquote>\n\n<p>I believe you're referring to this bit of code usually found an an express app's <code>app.js</code> file:</p>\n\n<p><code>app.use(express.static(path.join(__dirname, 'public')));</code></p>\n\n<p><code>express.static()</code> is a bit of middleware that maps directory names to the path directory for easy lookup. Usually you'll have:</p>\n\n<pre><code>- public\n  |_ javascripts\n  |_ stylesheets\n  |_ images\n</code></pre>\n\n<p>If you have a script in your <code>javascripts</code> directory, you dont have to type out the full path to include it. Just:</p>\n\n<p><code>./javascripts/script.js</code></p>\n\n<p>Static files are best considered as files that are not include by something like NPM or Bower. They are your own scripts, stylesheets, images, etc. It has nothing to do with the page being dynamic or static.</p>\n\n<p>As to your first question:</p>\n\n<p>Im personally not sure of the need for that kind of project architecture if you're using node. If you're using node and something like <a href=\"http://emberjs.com/\" rel=\"noreferrer\">Ember.js</a> or <a href=\"https://angularjs.org/\" rel=\"noreferrer\">Angular</a> for your clientside app, than I would personally put my actual application scripts inside of the <code>public/javascripts/</code> directory. But thats just me.</p>\n\n<p>At the end of the day, pick a project structure you like, and stick with it. If other people are working on the project however, stick with common conventions. It makes life easier.</p>\n"}],["27492540",{"id":"27492540","questionId":24428656,"isAccepted":false,"score":44,"created":1418675298,"edited":1422456480,"body":"<p>You can create a much cleaner implementation with Moment.js <a href=\"http://momentjs.com/docs/#/durations/\">Durations</a>. No manual parsing necessary.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var time = moment.duration(\"00:03:15\");\r\nvar date = moment(\"2014-06-07 09:22:06\");\r\ndate.subtract(time);\r\n$('#MomentRocks').text(date.format())</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.4/moment.js\"&gt;&lt;/script&gt;\r\n&lt;span id=\"MomentRocks\"&gt;&lt;/span&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],["28143812",{"id":"28143812","questionId":28143419,"isAccepted":true,"score":22,"created":1422237408,"edited":1422238124,"body":"<p>You must inverse the order of your router</p>\n\n<pre><code>app.use('/', router);\napp.use(express.static(__dirname + '/public'));\n</code></pre>\n\n<p>means your router will be called first and, if no middleware handles the request, then express will call static files so, if you put the static middleware first, the express will handle static files first.</p>\n\n<p>It is also recommended to put static middleware first.</p>\n\n<p>For your problem you should try this:</p>\n\n<pre><code>app.use(express.static(__dirname + '/public/html'));\napp.use(express.static(__dirname + '/public'));\napp.use('/', router);\n</code></pre>\n\n<p>Express will try static files first on public/html folder, then on the rest (including the public/html), i prefer putting html files on the root of public folder or maybe on a different folder (e.g public-html, static-html)</p>\n"}],["16111667",{"id":"16111667","questionId":5924072,"isAccepted":false,"score":52,"created":1366397716,"edited":1421284665,"body":"<p>I have the same problem. I have resolved the problem with following code:</p>\n\n<pre><code>app.use('/img',express.static(path.join(__dirname, 'public/images')));\napp.use('/js',express.static(path.join(__dirname, 'public/javascripts')));\napp.use('/css',express.static(path.join(__dirname, 'public/stylesheets')));\n</code></pre>\n\n<p>Static request example:</p>\n\n<pre><code>http://pruebaexpress.lite.c9.io/js/socket.io.js\n</code></pre>\n\n<p>I need a more simple solution. Does it exist?</p>\n"}],["27734303",{"id":"27734303","questionId":27734164,"isAccepted":true,"score":2,"created":1420143525,"body":"<p>app.use (and app.get etc . . .) doesn't take two parameters, the first parameter is the route (optional for use), then the rest are all middleware. </p>\n\n<pre><code>app.use('/static-route', function (req, res, next) {\n  // validation\n  // redirect\n  // etc . . .\n  next();\n}, express.static('./static'));\n</code></pre>\n"}],["5924732",{"id":"5924732","questionId":5924072,"isAccepted":true,"score":554,"created":1304811512,"edited":1419983550,"body":"<p>Try <code>http://localhost:3001/default.css</code>.</p>\n\n<p>To have <code>/styles</code> in your request URL, use:</p>\n\n<pre><code>app.use(\"/styles\", express.static(__dirname + '/styles'));\n</code></pre>\n\n<p>Look at the examples on <a href=\"http://expressjs.com/api.html\">this page</a>:</p>\n\n<pre><code>//Serve static content for the app from the \"public\" directory in the application directory.\n\n    // GET /style.css etc\n    app.use(express.static(__dirname + '/public'));\n\n// Mount the middleware at \"/static\" to serve static content only when their request path is prefixed with \"/static\".\n\n    // GET /static/style.css etc.\n    app.use('/static', express.static(__dirname + '/public'));\n</code></pre>\n"}],["12527220",{"id":"12527220","questionId":12525928,"isAccepted":false,"score":310,"created":1348217464,"edited":1415475267,"body":"<p>After having a bit of a play myself, you should use:</p>\n\n<p><code>console.log(req.originalUrl)</code></p>\n"}],["26152339",{"id":"26152339","questionId":26145451,"isAccepted":true,"score":11,"created":1412206497,"edited":1412213005,"body":"<p>You're able to load the files using the <code>file://</code> URL because it's a feature of your web browser.</p>\n\n<p>When loading the address <code>http://localhost:8080</code> you're no longer leveraging the browser's ability to serve the files (you're accessing the Node.js server). The HTML page being served contains relative paths which work in conjunction with the current hostname to load the assets.</p>\n\n<p>There is a multitude of options for serving the assets. </p>\n\n<p>You could serve the files with Node.js:</p>\n\n<ul>\n<li>Express.js has a module for <a href=\"https://github.com/expressjs/serve-static\" rel=\"noreferrer\">serving static assets</a></li>\n<li><a href=\"https://www.npmjs.org/package/node-static\" rel=\"noreferrer\">Node-static</a> is a module I found with a quick search on npm</li>\n</ul>\n\n<p>Alternatively you could use a web server to serve the files for you. This is likely to be the most performant option. <a href=\"http://nginx.com/resources/admin-guide/serving-static-content/\" rel=\"noreferrer\">Here is an example</a> of serving static content with nginx.</p>\n"}],["25463996",{"id":"25463996","questionId":25463423,"isAccepted":true,"score":352,"created":1408811166,"edited":1412042684,"body":"<p>The <code>express.static</code> middleware is separate from <code>res.sendFile</code>, so initializing it with an absolute path to your <code>public</code> directory won't do anything to <code>res.sendFile</code>.  You need to use an absolute path directly with <code>res.sendFile</code>. There are two simple ways to do it:</p>\n\n<ol>\n<li><code>res.sendFile(path.join(__dirname, '../public', 'index1.html'));</code></li>\n<li><code>res.sendFile('index1.html', { root: path.join(__dirname, '../public') });</code></li>\n</ol>\n\n<p><em><strong>Note:</strong> <code>__dirname</code> returns the directory that the currently executing script is in. In your case, it looks like <code>server.js</code> is in <code>app/</code>. So, to get to <code>public</code>, you'll need back out one level first: <code>../public/index1.html</code>.</em></p>\n\n<p><em><strong>Note:</strong> <a href=\"http://nodejs.org/api/path.html\"><code>path</code> is a built-in module</a> that needs to be <code>require</code>d for the above code to work: <code>var path = require('path');</code></em></p>\n"}],["24428984",{"id":"24428984","questionId":24428656,"isAccepted":true,"score":56,"created":1403781187,"edited":1403782646,"body":"<p><code>Moment.subtract</code> does not support an argument of type Moment - <a href=\"http://momentjs.com/docs/#/manipulating/subtract/\">documentation</a>:</p>\n\n<pre><code>moment().subtract(String, Number);\nmoment().subtract(Number, String); // 2.0.0\nmoment().subtract(String, String); // 2.7.0\nmoment().subtract(Duration); // 1.6.0\nmoment().subtract(Object);\n</code></pre>\n\n<p>The simplest solution is to specify the time delta as an object:</p>\n\n<pre><code>// Assumes string is hh:mm:ss\nvar myString = \"03:15:00\",\n    myStringParts = myString.split(':'),\n    hourDelta: +myStringParts[0],\n    minuteDelta: +myStringParts[1];\n\n\ndate.subtract({ hours: hourDelta, minutes: minuteDelta});\ndate.toString()\n// -&gt; \"Sat Jun 07 2014 06:07:06 GMT+0100\"\n</code></pre>\n"}],["23481165",{"id":"23481165","questionId":3978492,"isAccepted":false,"score":53,"created":1399321409,"body":"<p>Easiest way to deep clone Array or Object:</p>\n\n<pre><code>var dup_array = JSON.parse(JSON.stringify(original_array))\n</code></pre>\n"}],["17832325",{"id":"17832325","questionId":17831942,"isAccepted":true,"score":8,"created":1374664364,"body":"<p>You can use <code>express.static</code>, set it up early in your app:</p>\n\n<pre><code>app.use('/pdf', express.static(__dirname + '/pathToPDF'));\n</code></pre>\n\n<p>And it will automatically do the job for you when browser navigates to e.g. '/pdf/fooBar.pdf'.</p>\n"}],["16350826",{"id":"16350826","questionId":16333790,"isAccepted":true,"score":1308,"created":1367549321,"body":"<p>A good \"ready-to-use tool\" option could be http-server:</p>\n\n<pre><code>npm install http-server -g\n</code></pre>\n\n<p>To use it:</p>\n\n<pre><code>cd D:\\Folder\nhttp-server\n</code></pre>\n\n<p>Or, like this:</p>\n\n<pre><code>http-server D:\\Folder\n</code></pre>\n\n<p>Check it out: <a href=\"https://github.com/nodeapps/http-server\" rel=\"noreferrer\">https://github.com/nodeapps/http-server</a></p>\n"}],["14097702",{"id":"14097702","questionId":6116474,"isAccepted":false,"score":7,"created":1356930844,"edited":1356931792,"body":"<p>I don't like <code>$.inArray(..)</code>, it's the kind of ugly, jQuery-ish solution that most sane people wouldn't tolerate. Here's a snippet which adds a simple <code>contains(str)</code> method to your arsenal:</p>\n\n<pre><code>$.fn.contains = function (target) {\n  var result = null;\n  $(this).each(function (index, item) {\n    if (item === target) {\n      result = item;\n    }\n  });\n  return result ? result : false;\n}\n</code></pre>\n\n<p>Similarly, you could wrap <code>$.inArray</code> in an extension:</p>\n\n<pre><code>$.fn.contains = function (target) {\n  return ($.inArray(target, this) &gt; -1);\n}\n</code></pre>\n"}],["9677031",{"id":"9677031","questionId":9676791,"isAccepted":true,"score":1,"created":1331600960,"body":"<p>You have a starting number, and you trying to figure out what your current value is. Its a basic total - (time pass * decrement) problem.</p>\n\n<p>So example, You have your original time.</p>\n\n<pre><code>$originalDate = '2011-01-01';\n$now = '2011-03-01';\n\n//it will count no. of days\n$dateDiff=(strtotime($now) - strtotime($originalDate))/ (60 * 60 * 24);\n\n$startingValue = 500;\n$descrement = 50;\n\n$currentValue = $startingValue - ($dateDiff/30*$descrement);\n</code></pre>\n"}],["9676859",{"id":"9676859","questionId":9676791,"isAccepted":false,"score":0,"created":1331599579,"edited":1331600485,"body":"<p>if you want this in a function:</p>\n\n<pre><code>/* deduct()\n *\n * @param $start        - the starting amount to subtract from\n * @param $amount       - the amount to subtract by\n * @param $interval     - the interval between deductions\n * @param $current_time - the current time to measure against the interval\n *\n * @return the amount after deduction $amount\n *           every $interval from $start until $current_time\n */\nfunction deduct($start, $amount, $interval, $current_time) {\n  return $start - ($amount * floor($current_time / $interval));\n}\n</code></pre>\n\n<p>You can easily pass in a time value using <code>time()</code>, or something like that, formatted into your unit of time.</p>\n"}],["8363954",{"id":"8363954","questionId":149055,"isAccepted":false,"score":10,"created":1322868310,"edited":1322870319,"body":"<p>A simple option for proper comma placement by reversing the string first and basic regexp.</p>\n\n<pre><code>String.prototype.reverse = function() {\n    return this.split('').reverse().join('');\n};\n\nNumber.prototype.toCurrency = function( round_decimal /*boolean*/ ) {       \n     // format decimal or round to nearest integer\n     var n = this.toFixed( round_decimal ? 0 : 2 );\n\n     // convert to a string, add commas every 3 digits from left to right \n     // by reversing string\n     return (n + '').reverse().replace( /(\\d{3})(?=\\d)/g, '$1,' ).reverse();\n};\n</code></pre>\n"}],["6116502",{"id":"6116502","questionId":6116474,"isAccepted":false,"score":38,"created":1306269231,"edited":1306269575,"body":"<p>Here you go:</p>\n\n<pre><code>$.inArray('specialword', arr)\n</code></pre>\n\n<p>This function returns a positive integer (the array index of the given value), or <code>-1</code> if the given value was not found in the array.</p>\n\n<p><strong>Live demo:</strong> <a href=\"http://jsfiddle.net/simevidas/5Gdfc/\">http://jsfiddle.net/simevidas/5Gdfc/</a></p>\n\n<p>You probably want to use this like so:</p>\n\n<pre><code>if ( $.inArray('specialword', arr) &gt; -1 ) {\n    // the value is in the array\n}\n</code></pre>\n"}],["4944782",{"id":"4944782","questionId":4944750,"isAccepted":true,"score":267,"created":1297254239,"body":"<p>This will give you the difference between two dates, in milliseconds</p>\n\n<pre><code>var diff = Math.abs(date1 - date2);\n</code></pre>\n\n<p>In your example, it'd be</p>\n\n<pre><code>var diff = Math.abs(new Date() - compareDate);\n</code></pre>\n\n<p>You need to make sure that <code>compareDate</code> is a valid <code>Date</code> object.</p>\n\n<p>Something like this will probably work for you</p>\n\n<pre><code>var diff = Math.abs(new Date() - new Date(dateStr.replace(/-/g,'/')));\n</code></pre>\n\n<p>i.e. turning <code>\"2011-02-07 15:13:06\"</code> into <code>new Date('2011/02/07 15:13:06')</code>, which is a format the <code>Date</code> constructor can comprehend.</p>\n"}]]